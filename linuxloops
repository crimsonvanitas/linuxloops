#!/bin/bash
if ( ! test -z {,} ); then echo "Must be ran with \"bash\""; exit 1; fi
if [ -z $(which tar) ]; then echo "\"tar\" program needs to be installed first"; exit 1; fi
if [ -z $(which fdisk) ]; then echo "\"fdisk\" program needs to be installed first"; exit 1; fi
if [ $(whoami) != "root" ]; then echo "Please run with this script with sudo"; exit 1; fi

usage()
{
	echo ""
	echo "LinuxLoops: install Linux distros in disk image files."
	echo "Usage: LinuxLoops [-s X] [-z Y] -dist <Linux_distribution_name> -img <disk_image_path>"
	echo "-dist (distro), --distribution (distro)		Linux distribution name"
	echo "-env (desktop), --environment (desktop)		Desktop environment name"
	echo "-img (destination), --imagepath (destination)	Disk image file path / name (e.g. ubuntu.img)"
	echo "-s (disk image size), --size (disk image size)	Total disk image size in GB (minimum 10GB)"
	echo "-z (swap size), --swapsize (swap size)		Size of the swap partition within the disk image in GB"
	echo "-S, --surface					Add patches for Surface products (github.com/linux-surface)"
	echo "-e, --encrypt					Encrypt the data partition"
	echo "-l, --list					List availables distros and desktop environments"
	echo "-h, --help					Display this menu"
}

available_distros="archlinux artixlinux debian devuan elementary fedora gentoo kali kde_neon manjaro mint mxlinux nixos opensuse pop_os rockylinux tails ubuntu voidlinux zorin"
surface_supported="archlinux artixlinux debian devuan elementary fedora kali kde_neon manjaro mint mxlinux pop_os ubuntu zorin"
list_desktops()
{
case "$1" in
	'archlinux')
	available_desktops="none budgie cinnamon deepin deepin-full enlightenment gnome gnome-full i3 kde kde-full lxde lxde-full lxqt lxqt-full mate mate-full xfce xfce-full"
	;;
	'artixlinux')
	available_desktops="none budgie cinnamon deepin deepin-full enlightenment gnome gnome-full i3 kde kde-full lxde lxde-full lxqt lxqt-full mate mate-full xfce xfce-full"
	;;
	'debian')
	available_desktops="none budgie cinnamon cinnamon-full enlightenment gnome gnome-full kde kde-full lxde lxde-full lxqt lxqt-full mate mate-full xfce xfce-full"
	;;
	'devuan')
	available_desktops="none budgie cinnamon cinnamon-full enlightenment gnome gnome-full kde kde-full lxde lxde-full lxqt lxqt-full mate mate-full xfce xfce-full"
	;;
	'elementary')
	available_desktops="full"
	;;
	'fedora')
	available_desktops="none cinnamon cinnamon-full gnome gnome-full kde kde-full lxde lxde-full lxqt lxqt-full mate mate-full xfce xfce-full"
	;;
	'gentoo')
	available_desktops="none cinnamon enlightenment gnome kde lxqt mate xfce"
	;;
	'kali')
	available_desktops="none cinnamon cinnamon-full enlightenment enlightenment-full gnome gnome-full kde kde-full lxde lxde-full mate mate-full xfce xfce-full"
	;;
	'kde_neon')
	available_desktops="full"
	;;
	'manjaro')
	available_desktops="none budgie budgie-full cinnamon deepin deepin-full deepin-full enlightenment gnome gnome-full kde kde-full lxde lxqt mate mate-full xfce xfce-full"
	;;
	'mint')
	available_desktops="none budgie cinnamon cinnamon-full enlightenment gnome kde lxde lxqt mate mate-full ubuntu xfce xfce-full"
	;;
	'mxlinux')
	available_desktops="none budgie cinnamon cinnamon-full enlightenment gnome gnome-full kde kde-full lxde lxde-full lxqt lxqt-full mate mate-full xfce xfce-full"
	;;
	'nixos')
	available_desktops="none gnome-full kde-full"
	;;
	'opensuse')
	available_desktops="none budgie cinnamon enlightenment gnome kde lxde lxqt mate xfce"
	;;
	'pop_os')
	available_desktops="full"
	;;
	'rockylinux')
	available_desktops="none full"
	;;
	'tails')
	available_desktops="full"
	;;
	'ubuntu')
	available_desktops="none budgie budgie-full cinnamon cinnamon-full enlightenment gnome gnome-full kde kde-full lxde lxde-full lxqt lxqt-full mate mate-full studio-full ubuntu ubuntu-full xfce xfce-full"
	;;
	'voidlinux')
	available_desktops="none gnome gnome-full kde kde-full xfce"
	;;
	'zorin')
	available_desktops="full"
	;;
esac
}

list_all()
{
echo "Here is the list of available distros and desktop environments:"
for distro in $available_distros; do
list_desktops "$distro"
echo "- \"$distro\" -> desktops: $available_desktops"
done
}

check_parameters()
{
if [ -z "$destination" ]; then echo -e "Please provide a destination path for the image with \"-img\" or \"--imagepath\" argument.\n"; exit 1; fi
if [ -z "$distro" ] || [ -z "$(echo $available_distros | grep -w $distro)" ]; then echo -e "Please select a distro from the below list:\n$available_distros.\n"; exit 1; fi
list_desktops "$distro"
if [ ! -z "$desktop" ] && [ -z "$(echo $available_desktops | grep -w $desktop)" ]; then echo -e "$desktop desktop environment is not available, please choose from:\n$available_desktops.\n"; exit 1; fi
if [ "$surface" == "Yes" ] && [ -z "$(echo $surface_supported | grep -w $distro)" ]; then echo -e "Linux Surface patches are currently only supported with:\n$surface_supported.\n"; exit 1; fi
if [ "$distro" == "tails" ]; then
	if [ "$encryption" == "Yes" ]; then echo -e "rootfs encryption is not supported with tails but the persistent storage will be encrypted by default.\n"; exit 1; fi
	if [ ! -z "$swap_size" ]; then echo -e "Swap should not be enabled with tails for security reasons.\n"; exit 1; fi
fi
}

dist_params()
{
case "$1" in
	'tails')
	kernel_part=3
	initramfs_format="\$initramfs_prefix\$initramfs_suffix"
	initramfs_subsection_format="\$initramfs_prefix\$initramfs_suffix"
	rootfs_size=6
	swap_size=0
	encryption="No"
	;;
	*)
	kernel_part=2
	initramfs_format="\$initramfs_prefix\$kernel\$initramfs_suffix"
	initramfs_subsection_format="\$initramfs_prefix\$2\$initramfs_suffix"
	;;
esac
}

download_lxc_image()
{
local found=0
available_builds=$(curl -L https://uk.lxd.images.canonical.com/images/"$1"/"$2"/amd64/"$3"/ | grep 'alt="\[DIR]"' | tr '>' '\n' | grep '<a href' | cut -d'/' -f 2 | sort -r)
for build in $available_builds; do
	echo "Trying to download rootfs image from https://uk.lxd.images.canonical.com/images/$1/$2/amd64/$3/$build/rootfs.tar.xz..."
	if curl -L --output /dev/null --silent --head --fail https://uk.lxd.images.canonical.com/images/"$1"/"$2"/amd64/"$3"/"$build"/rootfs.tar.xz; then
		found=1
		curl -L https://uk.lxd.images.canonical.com/images/"$1"/"$2"/amd64/"$3"/"$build"/rootfs.tar.xz -o "$1".tar.xz
		mkdir -p "$linuxloopsdir"/chroot"$4"
		tar xf "$1".tar.xz -C "$linuxloopsdir"/chroot"$4"/
		rm "$1".tar.xz
		break
	else
		echo "Downloading rootfs image from https://uk.lxd.images.canonical.com/images/$1/$2/amd64/$3/$build/rootfs.tar.xz failed."
	fi
done
if [ -z "$found" ]; then
	echo "The rootfs image could not be downloaded, the server might be down. Exiting."
	exit 1
fi
}

write_partition_table()
{
if [ -z "$swap_size" ] || [ "$swap_size" -eq 0 ]; then
	if [ "$distro" != "tails" ]; then
		echo -e "g\nn\n1\n\n+16M\nn\n2\n\n+1008M\nn\n3\n\n\nt\n1\n1\nt\n2\n20\nt\n3\n20\nw" | fdisk "$1"
	else
		echo -e "g\nn\n1\n\n+16M\nn\n2\n\n+1008M\nn\n3\n\n+${rootfs_size}G\nn\n4\n\n\nt\n1\n1\nt\n2\n20\nt\n3\n20\nt\n4\n27\nx\nn\n4\nTailsData\nr\nw" | fdisk "$1"
	fi
else
	if [ "$root_device" == "/dev/mapper/root" ]; then
		echo -e "g\nn\n1\n\n+16M\nn\n2\n\n+1008M\nn\n3\n\n-${swap_size}G\nn\n4\n\n\nt\n1\n1\nt\n2\n20\nt\n3\n20\nt\n4\n20\nw" | fdisk "$1"
	else
		echo -e "g\nn\n1\n\n+16M\nn\n2\n\n+1008M\nn\n3\n\n-${swap_size}G\nn\n4\n\n\nt\n1\n1\nt\n2\n20\nt\n3\n20\nt\n4\n19\nw" | fdisk "$1"
	fi
fi
}

install_efi()
{
if [ -z "$1" ]; then
bootpath="$linuxloopsdir"/chroot/boot/efi/efi/boot
else
bootpath="$linuxloopsdir"/chroot"$1"/mnt/boot/efi/efi/boot
fi
mkdir -p "$bootpath"
cat >"$bootpath"/grub.cfg <<VMGRUB
set timeout=2

menuentry "$distro" --class "$distro" {
regexp --set disk "(^.+)(,gpt)" \$root
disk_type=\$disk
root_device=$vm_root_device
source (\$disk_type,2)/linuxloops/config
kernel=\$default_kernel
linux \$kernel_prefix\$kernel\$kernel_suffix root=\$root_device $cmdline_extra rw quiet
initrd $initramfs_format
}

submenu "Advanced options for $distro" --class "$distro" {
regexp --set disk "(^.+)(,gpt)" \$root
disk_type=\$disk
root_device=$vm_root_device
source (\$disk_type,2)/linuxloops/config
for kernel in \$kernels; do
menuentry "Boot with kernel \$kernel" {
	linux \$kernel_prefix\$kernel\$kernel_suffix root=\$root_device $cmdline_extra rw quiet
	initrd $initramfs_format
}
menuentry "Boot with kernel \$kernel in recovery mode" {
	linux \$kernel_prefix\$kernel\$kernel_suffix root=\$root_device $cmdline_extra rw systemd.unit=multi-user.target
	initrd $initramfs_format
}
menuentry "Boot with kernel \$kernel in linuxloops debug mode" {
	linux \$kernel_prefix\$kernel\$kernel_suffix root=\$root_device $cmdline_extra rw linuxloops_debug=1
	initrd $initramfs_format
}
done
}
VMGRUB
curl -L https://github.com/sebanc/brunch/raw/r94/efi-partition/efi/boot/grubx64.efi -o "$bootpath"/bootx64.efi
}

umount_chroot()
{
install_efi "$1"
if [ -z "$1" ]; then
	if mountpoint -q "$linuxloopsdir"/chroot/boot/efi; then umount "$linuxloopsdir"/chroot/boot/efi; fi
	if mountpoint -q "$linuxloopsdir"/chroot/boot; then umount "$linuxloopsdir"/chroot/boot; fi
else
	if mountpoint -q "$linuxloopsdir"/chroot"$1"/mnt/boot/efi; then umount "$linuxloopsdir"/chroot"$1"/mnt/boot/efi; fi
	if mountpoint -q "$linuxloopsdir"/chroot"$1"/mnt/boot; then umount "$linuxloopsdir"/chroot"$1"/mnt/boot; fi
fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/tmp; then umount "$linuxloopsdir"/chroot"$1"/tmp; fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/dev/shm; then umount "$linuxloopsdir"/chroot"$1"/dev/shm; fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/dev/pts; then umount "$linuxloopsdir"/chroot"$1"/dev/pts; fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/dev; then umount "$linuxloopsdir"/chroot"$1"/dev; fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/sys; then umount "$linuxloopsdir"/chroot"$1"/sys; fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/proc; then umount "$linuxloopsdir"/chroot"$1"/proc; fi
}

mount_chroot()
{
mkdir -p "$linuxloopsdir"/chroot"$1"/dev/pts "$linuxloopsdir"/chroot"$1"/dev/shm "$linuxloopsdir"/chroot"$1"/etc "$linuxloopsdir"/chroot"$1"/proc "$linuxloopsdir"/chroot"$1"/sys "$linuxloopsdir"/chroot"$1"/tmp
chmod 1777 "$linuxloopsdir"/chroot"$1"/tmp
mount -t proc none "$linuxloopsdir"/chroot"$1"/proc
mount -t sysfs none "$linuxloopsdir"/chroot"$1"/sys
mount -t devtmpfs none "$linuxloopsdir"/chroot"$1"/dev
mount -t devpts none "$linuxloopsdir"/chroot"$1"/dev/pts
mount -t tmpfs -o mode=1777,nosuid,nodev,strictatime none "$linuxloopsdir"/chroot"$1"/dev/shm
mount -t tmpfs none "$linuxloopsdir"/chroot"$1"/tmp
if [ -z "$1" ]; then
	mkdir -p "$linuxloopsdir"/chroot/boot
	mount "$destination_loop"p2 "$linuxloopsdir"/chroot/boot
	mkdir -p "$linuxloopsdir"/chroot/boot/efi
	mount "$destination_loop"p1 "$linuxloopsdir"/chroot/boot/efi
else
	mkdir -p "$linuxloopsdir"/chroot"$1"/mnt/boot
	mount "$destination_loop"p2 "$linuxloopsdir"/chroot"$1"/mnt/boot
	mkdir -p "$linuxloopsdir"/chroot"$1"/mnt/boot/efi
	mount "$destination_loop"p1 "$linuxloopsdir"/chroot"$1"/mnt/boot/efi
fi
}

add_linuxloops_init()
{
touch "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
cat >>"$linuxloopsdir"/chroot"$1"/tmp/install_initramfs <<'INITSCRIPT'
printk_levels="$(cat /proc/sys/kernel/printk)"
echo 0 0 0 0 > /proc/sys/kernel/printk
printf "\033c"

echo ""
echo "LinuxLoops boot sequence started."

recovery_shell()
{
echo -e "\n\nYou are in the recovery shell, you can notably use the included tools to obtain data on your partitions ("blkid" or "lsblk") or to perform an fscheck ("e2fsck" or "ntfsfix"). Once you are done with your modifications, type \"exit\" to reboot the computer.\n\n"
sh
reboot -f
}

linuxloops_debug="$(grep -o 'linuxloops_debug=[^ ,]\+' /proc/cmdline | cut -d'=' -f2)"
img_uuid="$(grep -o 'img_uuid=[^ ,]\+' /proc/cmdline | cut -d'=' -f2)"
img_part="$(grep -o 'img_part=[^ ,]\+' /proc/cmdline | cut -d'=' -f2)"
img_path="$(grep -o 'img_path=[^ ,]\+' /proc/cmdline | cut -d'=' -f2)"
root="$(grep -o 'root=[^ ,]\+' /proc/cmdline | cut -d'=' -f2)"

udevadm trigger --type=subsystems --action=add >/dev/null 2>&1 || { echo "udev subsystems init failed."; recovery_shell; }
udevadm trigger --type=devices --action=add >/dev/null 2>&1 || { echo "udev devices init failed."; recovery_shell; }

if [ ! -z "$linuxloops_debug" ]; then recovery_shell; fi

if [ -z "$img_path" ]; then
echo "LinuxLoops vm boot mode." > /dev/kmsg
if [ "$root" = "/dev/mapper/root" ]; then
	modprobe dm-crypt
	until false; do
		cryptopass=$(read -s -p "Encryption password: " cryptopass; echo "$cryptopass")
		echo -n "$cryptopass" | cryptsetup luksOpen /dev/sda3 root -
		if [ -b /dev/mapper/root ]; then break; else echo "The password is incorrect, try again..."; fi
	done
fi
if [ -b /dev/sda4 ] && [ ! -z "$cryptopass" ]; then
	echo -n "$cryptopass" | cryptsetup luksOpen /dev/sda4 swap -
	swapon /dev/mapper/swap || { echo "The swap device could not be enabled."; recovery_shell; }
elif [ -b /dev/sda4 ] && [ "$(blkid -s TYPE -o value /dev/sda4)" == "LL-SWAP" ]; then
	swapon /dev/sda4 || { echo "The swap device could not be enabled."; recovery_shell; }
fi
else
echo "LinuxLoops full boot mode." > /dev/kmsg
modprobe loop

timeout=0
until [ -b "$(blkid --match-token PARTUUID=$img_uuid | cut -d':' -f1)" ]; do
if [ $timeout = 10 ]; then echo "The boot partition was not found, it might be due to an incorrect GRUB config."; recovery_shell; fi
sleep 1
timeout=$(( $timeout + 1 ))
done

echo "LinuxLoops boot partition found." > /dev/kmsg

if [ ! -z "$img_uuid" ]; then img_part="$(blkid --match-token PARTUUID=$img_uuid | cut -d':' -f1)"; fi
echo "img_uuid=$img_uuid" > /dev/kmsg
mkdir /mainroot
fstype=$(blkid -s TYPE -o value "$img_part")
echo "img_part=$img_part" > /dev/kmsg
if [ "$fstype" = "ntfs" ]; then
	if modprobe ntfs3 > /dev/null 2>&1; then
		mount -n -t ntfs3 "$img_part" /mainroot || { echo "The boot partition could not be mounted."; recovery_shell; }
	else
		ntfs-3g "$img_part" /mainroot || { echo "The boot partition could not be mounted."; recovery_shell; }
	fi
else
	mount -n -t "$fstype" "$img_part" /mainroot || { echo "The boot partition could not be mounted."; recovery_shell; }
fi
if [ -f /mainroot/"$img_path" ]; then
	if [ ! -b /dev/loop0 ]; then mknod -m 660 /dev/loop0 b 7 0 || { echo "The loop device could not be created."; recovery_shell; }; fi
	losetup -P /dev/loop0 /mainroot"$img_path" || { echo "The loop device could not be setup."; recovery_shell; }
	if [ "$root" = "/dev/mapper/root" ]; then
		modprobe dm-crypt
		until false; do
			cryptopass=$(read -s -p "Encryption password: " cryptopass; echo "$cryptopass")
			echo -n "$cryptopass" | cryptsetup luksOpen /dev/loop0p3 root -
			if [ -b /dev/mapper/root ]; then break; else echo "The password is incorrect, try again..."; fi
		done
	fi
	if [ -b /dev/loop0p4 ] && [ ! -z "$cryptopass" ]; then
		echo -n "$cryptopass" | cryptsetup luksOpen /dev/loop0p4 swap -
		swapon /dev/mapper/swap || { echo "The swap device could not be enabled."; recovery_shell; }
	elif [ -b /dev/loop0p4 ] && [ "$(blkid -s TYPE -o value /dev/loop0p4)" == "LL-SWAP" ]; then
		swapon /dev/loop0p4 || { echo "The swap device could not be enabled."; recovery_shell; }
	fi
else
	echo "The rootfs image file was not found, it might be due to an incorrect GRUB config or unsupported configuration."; recovery_shell
fi
fi

echo ""
echo $printk_levels > /proc/sys/kernel/printk
INITSCRIPT
}

install_initcpio()
{
cat >"$linuxloopsdir"/chroot/tmp/install_initramfs <<INITCPIOSTART
if [ "$root_device" == "/dev/mapper/root" ]; then
sed -i 's@HOOKS=(base udev@HOOKS=(base udev linuxloops encrypt@g' /etc/mkinitcpio.conf
else
sed -i 's@HOOKS=(base udev@HOOKS=(base udev linuxloops@g' /etc/mkinitcpio.conf
fi
cat >/etc/initcpio/install/linuxloops <<'INSTALLHOOK'
#!/bin/bash

build() {
	add_binary 'bash'
	add_binary 'blkid'
	add_binary 'cryptsetup'
	add_binary 'cut'
	add_binary 'e2fsck'
	add_binary 'grep'
	add_binary 'losetup'
	add_binary 'lsblk'
	add_binary 'ntfs-3g'
	add_binary 'ntfsfix'
	add_binary 'swapon'

	add_module '8250_dw'
	add_module 'aes'
	add_module 'atkbd'
	add_module 'cbc'
	add_module 'dm_crypt'
	add_module 'exfat'
	add_module 'fuse'
	add_module 'i8042'
	add_module 'intel_lpss'
	add_module 'intel_lpss_pci'
	add_module 'loop'
	add_module 'ntfs3'
	add_module 'nvme'
	add_module 'pinctrl_amd'
	add_module 'quota_v1'
	add_module 'quota_v2'
	add_module 'serio'
	add_module 'sha256'
	add_module 'surface_aggregator'
	add_module 'surface_aggregator_registry'
	add_module 'surface_hid'
	add_module 'surface_hid_core'
	add_module 'usbhid'
	add_module 'xhci_pci'

	add_runscript

	mkdir -p /boot/linuxloops
	for kernel in \$(ls /boot/vmlinuz-* | sed 's@/boot/vmlinuz-@@g' | sort -V); do
		default_kernel="\$kernel"
		kernels="\n\$kernel\$kernels"
	done
	echo -e "default_kernel=\"\$default_kernel\"" > /boot/linuxloops/config
	echo -e "kernels=\"\$kernels\n\"" >> /boot/linuxloops/config
	echo -e "kernel_prefix=\"$kernel_prefix\"" >> /boot/linuxloops/config
	echo -e "kernel_suffix=\"$kernel_suffix\"" >> /boot/linuxloops/config
	echo -e "initramfs_prefix=\"$initramfs_prefix\"" >> /boot/linuxloops/config
	echo -e "initramfs_suffix=\"$initramfs_suffix\"" >> /boot/linuxloops/config
}

help() {
    cat <<HELPEOF
Installs the linuxloops hook.
HELPEOF
}
INSTALLHOOK
cat >/etc/initcpio/hooks/linuxloops <<'RUNHOOK'
#!/bin/bash

run_hook() {
INITCPIOSTART
add_linuxloops_init
echo -e "}\nRUNHOOK" >> "$linuxloopsdir"/chroot/tmp/install_initramfs
echo -e "chmod 0755 /etc/initcpio/hooks/linuxloops" >> "$linuxloopsdir"/chroot/tmp/install_initramfs
echo -e "mkinitcpio -P" >> "$linuxloopsdir"/chroot/tmp/install_initramfs
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_initramfs
}

install_initramfstools()
{
cat >"$linuxloopsdir"/chroot/tmp/install_initramfs <<INITRAMFSTOOLSSTART
echo "BUSYBOX=n" >> /etc/initramfs-tools/initramfs.conf
cat >/etc/initramfs-tools/hooks/linuxloops <<'INSTALLHOOK'
#!/bin/bash
PREREQ=""
prereqs()
{
   echo "\$PREREQ"
}

case \$1 in
prereqs)
   prereqs
   exit 0
   ;;
esac

. /usr/share/initramfs-tools/hook-functions
# Begin real processing below this line

rm -f "\$DESTDIR/bin/losetup" "\$DESTDIR/sbin/losetup"

copy_exec \$(command -v bash)
copy_exec \$(command -v blkid)
copy_exec \$(command -v cryptsetup)
copy_exec \$(command -v cut)
copy_exec \$(command -v e2fsck)
copy_exec \$(command -v grep)
copy_exec \$(command -v losetup)
copy_exec \$(command -v lsblk)
copy_exec \$(command -v ntfs-3g)
copy_exec \$(command -v ntfsfix)
copy_exec \$(command -v swapon)

manual_add_modules 8250_dw
manual_add_modules aes
manual_add_modules atkbd
manual_add_modules cbc
manual_add_modules dm-crypt
manual_add_modules exfat
manual_add_modules fuse
manual_add_modules i8042
manual_add_modules intel_lpss
manual_add_modules intel_lpss_pci
manual_add_modules loop
manual_add_modules ntfs3
manual_add_modules nvme
manual_add_modules pinctrl_amd
manual_add_modules quota_v1
manual_add_modules quota_v2
manual_add_modules serio
manual_add_modules sha256
manual_add_modules surface_aggregator
manual_add_modules surface_aggregator_registry
manual_add_modules surface_hid
manual_add_modules surface_hid_core
manual_add_modules usbhid
manual_add_modules xhci_pci

mkdir -p /boot/linuxloops
for kernel in \$(ls /boot/vmlinuz-* | sed 's@/boot/vmlinuz-@@g' | sort -V); do
	default_kernel="\$kernel"
	kernels="\n\$kernel\$kernels"
done
echo -e "default_kernel=\"\$default_kernel\"" > /boot/linuxloops/config
echo -e "kernels=\"\$kernels\n\"" >> /boot/linuxloops/config
echo -e "kernel_prefix=\"$kernel_prefix\"" >> /boot/linuxloops/config
echo -e "kernel_suffix=\"$kernel_suffix\"" >> /boot/linuxloops/config
echo -e "initramfs_prefix=\"$initramfs_prefix\"" >> /boot/linuxloops/config
echo -e "initramfs_suffix=\"$initramfs_suffix\"" >> /boot/linuxloops/config
INSTALLHOOK
chmod 0755 /etc/initramfs-tools/hooks/linuxloops
cat >/etc/initramfs-tools/scripts/init-premount/linuxloops <<'RUNHOOK'
#!/bin/bash
PREREQ=""
prereqs()
{
   echo "\$PREREQ"
}

case \$1 in
prereqs)
   prereqs
   exit 0
   ;;
esac

INITRAMFSTOOLSSTART
add_linuxloops_init
echo -e "RUNHOOK" >> "$linuxloopsdir"/chroot/tmp/install_initramfs
echo -e "chmod 0755 /etc/initramfs-tools/scripts/init-premount/linuxloops" >> "$linuxloopsdir"/chroot/tmp/install_initramfs
echo -e "update-initramfs -u -k all" >> "$linuxloopsdir"/chroot/tmp/install_initramfs
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_initramfs
}

install_dracut()
{
cat >"$linuxloopsdir"/chroot/tmp/install_initramfs <<INITDRACUT
echo 'omit_dracutmodules+=" busybox "' >> /etc/dracut.conf
mkdir /usr/lib/dracut/modules.d/30linuxloops
cat >/usr/lib/dracut/modules.d/30linuxloops/module-setup.sh <<'INSTALLHOOK'
#!/bin/bash

check() {
	return 0
}

installkernel() {
	instmods '8250_dw'
	instmods 'aes'
	instmods 'atkbd'
	instmods 'cbc'
	instmods 'dm-crypt'
	instmods 'exfat'
	instmods 'fuse'
	instmods 'i8042'
	instmods 'intel_lpss'
	instmods 'intel_lpss_pci'
	instmods 'loop'
	instmods 'ntfs3'
	instmods 'nvme'
	instmods 'pinctrl_amd'
	instmods 'quota_v1'
	instmods 'quota_v2'
	instmods 'serio'
	instmods 'sha256'
	instmods 'surface_aggregator'
	instmods 'surface_aggregator_registry'
	instmods 'surface_hid'
	instmods 'surface_hid_core'
	instmods 'usbhid'
	instmods 'xhci_pci'
}

install() {
	inst "\$(command -v bash)" /bin/bash
	inst "\$(command -v blkid)" /sbin/blkid
	inst "\$(command -v cryptsetup)" /sbin/cryptsetup
	inst "\$(command -v cut)" /sbin/cut
	inst "\$(command -v e2fsck)" /sbin/e2fsck
	inst "\$(command -v grep)" /sbin/grep
	inst "\$(command -v losetup)" /sbin/losetup
	inst "\$(command -v lsblk)" /sbin/lsblk
	inst "\$(command -v ntfs-3g)" /sbin/ntfs-3g
	inst "\$(command -v ntfsfix)" /sbin/ntfsfix
	inst "\$(command -v swapon)" /sbin/swapon
	inst_hook pre-trigger 30 "\$moddir/init-linuxloops.sh"
	inst_script "\$moddir/linuxloops.sh" "/sbin/linuxloops.sh"

	mkdir -p /boot/linuxloops
if [ "\$(grep -o '^NAME=[^,]\+' /etc/os-release | sed 's@"@@g' | cut -d'=' -f2)" == "Fedora Linux" ] || [ "\$(grep -o '^NAME=[^,]\+' /etc/os-release | sed 's@"@@g' | cut -d'=' -f2)" == "Rocky Linux" ]; then
	rm -f /boot/vmlinuz*
	for kernel in \$(ls /lib/modules/*/vmlinuz | sed 's@/lib/modules/@@g' | sed 's@/vmlinuz@@g' | sort -V); do
		cp "/lib/modules/\$kernel/vmlinuz" "/boot/vmlinuz-\$kernel"
		default_kernel="\$kernel"
		kernels="\n\$kernel\$kernels"
	done
else
	for kernel in \$(ls /boot/vmlinuz-* | sed 's@/boot/vmlinuz-@@g' | sort -V); do
		default_kernel="\$kernel"
		kernels="\n\$kernel\$kernels"
	done
fi
	echo -e "default_kernel=\"\$default_kernel\"" > /boot/linuxloops/config
	echo -e "kernels=\"\$kernels\n\"" >> /boot/linuxloops/config
	echo -e "kernel_prefix=\"$kernel_prefix\"" >> /boot/linuxloops/config
	echo -e "kernel_suffix=\"$kernel_suffix\"" >> /boot/linuxloops/config
	echo -e "initramfs_prefix=\"$initramfs_prefix\"" >> /boot/linuxloops/config
	echo -e "initramfs_suffix=\"$initramfs_suffix\"" >> /boot/linuxloops/config
}
INSTALLHOOK
chmod 0755 /usr/lib/dracut/modules.d/30linuxloops/module-setup.sh
cat >/usr/lib/dracut/modules.d/30linuxloops/init-linuxloops.sh <<'INITHOOK'
#!/bin/bash
setsid sh -c 'exec /sbin/linuxloops.sh </dev/tty1 >/dev/tty1 2>&1'
INITHOOK
chmod 0755 /usr/lib/dracut/modules.d/30linuxloops/init-linuxloops.sh
cat >/usr/lib/dracut/modules.d/30linuxloops/linuxloops.sh <<'RUNHOOK'
#!/bin/bash

INITDRACUT
add_linuxloops_init
echo -e "RUNHOOK" >> "$linuxloopsdir"/chroot/tmp/install_initramfs
echo -e "chmod 0755 /usr/lib/dracut/modules.d/30linuxloops/linuxloops.sh" >> "$linuxloopsdir"/chroot/tmp/install_initramfs
echo -e "dracut --no-hostonly -f --regenerate-all" >> "$linuxloopsdir"/chroot/tmp/install_initramfs
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_initramfs
}

install_nixos_config ()
{
add_linuxloops_init /installroot
mkdir -p "$linuxloopsdir"/chroot/installroot/mnt/etc/nixos
cat >"$linuxloopsdir"/chroot/installroot/mnt/etc/nixos/configuration.nix <<NIXOSCONFIGURATION
# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
imports = [ ./linuxloops.nix ];

boot.kernelPackages = pkgs.linuxPackages_latest;
boot.kernelModules = [ "kvm-amd" ];

users.users.$username = {
isNormalUser = true;
extraGroups = [ "wheel" ];
};

networking.hostName = "nixos-linuxloops";
networking.networkmanager.enable = true;
networking.useDHCP = false;

sound.enable = true;
hardware.pulseaudio.enable = true;

services.printing.enable = true;

powerManagement.cpuFreqGovernor = "ondemand";

$nixos_desktop

# This value determines the NixOS release from which the default
# settings for stateful data, like file locations and database versions
# on your system were taken. It‘s perfectly fine and recommended to leave
# this value at the release version of the first install of this system.
# Before changing this value read the documentation for this option
# (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
system.stateVersion = "21.11"; # Did you read the comment?
}
NIXOSCONFIGURATION
cat >"$linuxloopsdir"/chroot/installroot/mnt/etc/nixos/linuxloops.nix <<NIXOSLINUXLOOPS
# Do not modify this file which contains the linuxloops configuration.
# Please make changes to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
fileSystems."/" = {
	label = "LL-ROOT";
	fsType = "ext4";
};

fileSystems."/boot" = {
	label = "LL-BOOT";
	fsType = "ext4";
};

boot.loader = {
	efi = {
		canTouchEfiVariables = false;
		efiSysMountPoint = "/boot/efi";
	};
	grub = {
		efiSupport = true;
		device = "nodev";
		enable = true;
		extraGrubInstallArgs = [ "--help" ];
		extraPrepareConfig = ''
mkdir -p /boot/linuxloops
rm -f /boot/vmlinuz*
for kernel in \$(ls /boot/kernels/*Image | sed 's@/boot/kernels/@@g' | sort -V); do
kernel_ver="\$(echo \$kernel | cut -d'-' -f3)"
ln -s "./kernels/\$kernel" "/boot/vmlinuz-\$kernel_ver"
default_kernel="\$kernel_ver"
kernels="\n\$kernel_ver\$kernels"
done
rm -f /boot/initrd*
for initrd in \$(ls /boot/kernels/*initrd | sed 's@/boot/kernels/@@g' | sort -V); do
initrd_ver="\$(echo \$initrd | cut -d'-' -f4)"
ln -s "./kernels/\$initrd" "/boot/initrd-\$initrd_ver"
done
rm -f /init
ln -s "\$(find /nix | grep '\-nixos\-system\-.*/init$' | head -1)" /init
echo -e "default_kernel=\"\$default_kernel\"" > /boot/linuxloops/config
echo -e "kernels=\"\$kernels\n\"" >> /boot/linuxloops/config
echo -e "kernel_prefix=\"$kernel_prefix\"" >> /boot/linuxloops/config
echo -e "kernel_suffix=\"$kernel_suffix\"" >> /boot/linuxloops/config
echo -e "initramfs_prefix=\"$initramfs_prefix\"" >> /boot/linuxloops/config
echo -e "initramfs_suffix=\"$initramfs_suffix\"" >> /boot/linuxloops/config
'';
	};
};

boot.initrd.availableKernelModules = [ "8250_dw" "aes" "atkbd" "cbc" "dm_crypt" "encrypted_keys" "exfat" "fuse" "i8042" "intel_lpss" "intel_lpss_pci" "loop" "ntfs3" "nvme" "pinctrl_amd" "quota_v1" "quota_v2" "serio" "sha256" "surface_aggregator" "surface_aggregator_registry" "surface_hid" "surface_hid_core" "usbhid" "xhci_pci" ];
boot.initrd.extraUtilsCommands = ''
copy_bin_and_libs \${pkgs.bash}/bin/bash
copy_bin_and_libs \${pkgs.util-linux}/bin/blkid
copy_bin_and_libs \${pkgs.coreutils}/bin/coreutils
copy_bin_and_libs \${pkgs.cryptsetup}/bin/cryptsetup
copy_bin_and_libs \${pkgs.coreutils}/bin/cut
copy_bin_and_libs \${pkgs.e2fsprogs}/bin/e2fsck
copy_bin_and_libs \${pkgs.gnugrep}/bin/grep
copy_bin_and_libs \${pkgs.util-linux}/bin/losetup
copy_bin_and_libs \${pkgs.util-linux}/bin/lsblk
copy_bin_and_libs \${pkgs.ntfs3g}/bin/ntfs-3g
copy_bin_and_libs \${pkgs.ntfs3g}/bin/ntfsfix
copy_bin_and_libs \${pkgs.util-linux}/bin/swapon
'';
boot.initrd.postDeviceCommands = ''
$(cat "$linuxloopsdir"/chroot/installroot/tmp/install_initramfs)
'';

hardware.enableAllFirmware = true;
nixpkgs.config.allowUnfree = true;
nix.autoOptimiseStore = true;
nix.useSandbox = false;
}
NIXOSLINUXLOOPS
}

install_iso_init ()
{
add_linuxloops_init /installroot
cat >"$linuxloopsdir"/chroot/installroot/tmp/install_boot <<INITISO
#!/bin/bash
mkdir /mnt/boot/linuxloops
echo -e "default_kernel=\"vmlinuz\"" > /mnt/boot/linuxloops/config
echo -e "kernels=\"vmlinuz\"" >> /mnt/boot/linuxloops/config
echo -e "kernel_prefix=\"$kernel_prefix\"" >> /mnt/boot/linuxloops/config
echo -e "kernel_suffix=\"$kernel_suffix\"" >> /mnt/boot/linuxloops/config
echo -e "initramfs_prefix=\"$initramfs_prefix\"" >> /mnt/boot/linuxloops/config
echo -e "initramfs_suffix=\"$initramfs_suffix\"" >> /mnt/boot/linuxloops/config
INITISO
chmod 0755 "$linuxloopsdir"/chroot/installroot/tmp/install_boot
}

install_surface_pacman()
{
cat >"$linuxloopsdir"/chroot/tmp/install_surface <<SURFACEPACMAN
curl -s https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.asc | pacman-key --add -
pacman-key --finger 56C464BAAC421453
pacman-key --lsign-key 56C464BAAC421453
cat >>/etc/pacman.conf <<'SURFACEREPO'
[linux-surface]
Server = https://pkg.surfacelinux.com/arch/
SURFACEREPO
pacman -Syu
pacman -R --noconfirm $1
pacman -S --noconfirm linux-surface linux-surface-headers iptsd surface-ath10k-firmware-override base-devel git fakeroot meson python-pytest python-libevdev python-pyudev libc++ gst-plugins-base-libs python-yaml python-ply python-jinja gstreamer qt5-tools libevent clang v4l2loopback-dkms
systemctl enable iptsd
git clone https://aur.archlinux.org/libwacom-surface.git /tmp/libwacom-surface
chown -R '$username':'$username' /tmp/libwacom-surface
echo '$userpass' | su - '$username' -c "gpg --keyserver hkps://keyserver.ubuntu.com --recv-key E23B7E70B467F0BF"
echo '$userpass' | su - '$username' -c "cd /tmp/libwacom-surface && makepkg -s"
yes | pacman -U /tmp/libwacom-surface/*.pkg.tar.*
git clone https://git.libcamera.org/libcamera/libcamera.git /tmp/libcamera
cd /tmp/libcamera
meson build -Dpipelines=uvcvideo,ipu3 -Dprefix=/usr -Dgstreamer=enabled -Dv4l2=true
ninja -C build
ninja -C build install
cd /
usermod -aG video '$username'
SURFACEPACMAN
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_surface
}

install_surface_apt()
{
cat >"$linuxloopsdir"/chroot/tmp/install_surface <<SURFACEAPT
if [ "\$(grep -o 'UBUNTU_CODENAME=[^ ,]\+' /etc/os-release | cut -d'=' -f2)" == "focal" ]; then
add-apt-repository ppa:tj/bugfixes -y
apt-get update
yes | DEBIAN_FRONTEND=noninteractive apt install apt apt-utils python3-pip
pip3 install meson
fi
curl https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.asc | gpg --dearmor | dd of=/etc/apt/trusted.gpg.d/linux-surface.gpg
echo "deb [arch=amd64] https://pkg.surfacelinux.com/debian release main" > /etc/apt/sources.list.d/linux-surface.list
apt update
yes | DEBIAN_FRONTEND=noninteractive apt purge $1
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-surface linux-headers-surface iptsd libwacom-surface surface-control surface-dtx-daemon surface-ath10k-firmware-override git build-essential meson ninja-build pkg-config libgnutls28-dev openssl python3-pip python3-yaml python3-ply python3-jinja2 qtbase5-dev libqt5core5a libqt5gui5 libqt5widgets5 qttools5-dev-tools libtiff-dev libevent-dev gstreamer1.0-tools libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev v4l2loopback-dkms
systemctl enable iptsd
git clone https://git.libcamera.org/libcamera/libcamera.git /tmp/libcamera
cd /tmp/libcamera
meson build -Dpipelines=uvcvideo,ipu3 -Dprefix=/usr -Dgstreamer=enabled -Dv4l2=true
ninja -C build
ninja -C build install
cd /
usermod -aG video '$username'
SURFACEAPT
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_surface
}

install_surface_dnf()
{
cat >"$linuxloopsdir"/chroot/tmp/install_surface <<SURFACEDNF
dnf config-manager --add-repo=https://pkg.surfacelinux.com/fedora/linux-surface.repo
yes | dnf remove $1
dnf update
yes | dnf install -y --allowerasing kernel-surface kernel-surface-devel iptsd libwacom-surface surface-control surface-dtx-daemon
yes | dnf install git make automake gcc gcc-c++ kernel-devel libatomic dkms meson ninja-build pkg-config gnutls-devel openssl python3-pip python3-yaml python3-ply python3-jinja2 qt5-qtbase-devel libtiff-devel libevent-devel gstreamer1-devel gstreamer1-plugins-base-devel
cat >>/etc/modprobe.d/ath10k.conf <<'ATH10K'
# Board override and quirks for Microsoft Surface devices with ATK10K WiFi chip
options ath10k_core skip_otp=y override_board=board-override.bin override_board2=none
ATH10K
curl -L https://github.com/sebanc/brunch/raw/r94/extra-firmwares/ath10k/QCA6174/hw3.0/surface_go.bin -o /lib/firmware/ath10k/QCA6174/hw3.0/board-override.bin
curl -L https://github.com/umlaeute/v4l2loopback/archive/v0.12.5.tar.gz | tar xvz -C /usr/src
dkms add -m v4l2loopback -v 0.12.5
ls /usr/lib/modules/*/vmlinuz | sed 's@/usr/lib/modules/@@g' | sed 's@/vmlinuz@@g' | xargs -n1 /usr/lib/dkms/dkms_autoinstaller start
git clone https://git.libcamera.org/libcamera/libcamera.git /tmp/libcamera
cd /tmp/libcamera
meson build -Dpipelines=uvcvideo,ipu3 -Dprefix=/usr -Dgstreamer=enabled -Dv4l2=true
ninja -C build
ninja -C build install
cd /
usermod -aG video '$username'
SURFACEDNF
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_surface
}

cleanup()
{
cat >"$linuxloopsdir"/chroot"$1"/tmp/cleanup <<CLEANUP
rm -f /usr/lib/NetworkManager/conf.d/10-globally-managed-devices.conf
rm -f /usr/share/xsessions/lightdm-xsession.desktop
rm -f /etc/pacman.d/gnupg/S.gpg-agent
rm -f /home/'$username'/.gnupg/S.gpg-agent
rm -f /home/'$username'/.gnupg/S.dirmngr
sleep 5
CLEANUP
chmod 0755 "$linuxloopsdir"/chroot"$1"/tmp/cleanup
}

chroot_archlinux()
{
download_lxc_image archlinux current default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'ARCHLINUXINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "archlinux-linuxloops" > /etc/hostname
mkdir -p /run/systemd/resolve
echo "nameserver 8.8.8.8" > /run/systemd/resolve/resolv.conf
sed -i 's@#en_US.UTF-8 UTF-8@en_US.UTF-8 UTF-8@g' /etc/locale.gen
locale-gen
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm linux linux-firmware ntfs-3g sudo iwd modemmanager networkmanager cryptsetup nano acpid curl thermald bash-completion ca-certificates gnupg polkit
systemctl enable acpid
systemctl enable NetworkManager
systemctl enable thermald
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
ARCHLINUXINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<ARCHLINUXUSER
#!/bin/bash
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
ARCHLINUXUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="gnome"; fi
desktop_base="xorg-server alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf pulseaudio-alsa adwaita-icon-theme ttf-dejavu udisks2"
case "$desktop" in
	'none')
	install_desktop=""
	;;
	'budgie')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter budgie-desktop arc-icon-theme nautilus tilix network-manager-applet
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'cinnamon')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter cinnamon gnome-terminal nemo
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'deepin')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter deepin deepin-terminal
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'deepin-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter deepin deepin-terminal deepin-extra
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'enlightenment')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter enlightenment terminology
pacman -R --noconfirm networkmanager
pacman -S --noconfirm bluez connman
systemctl enable bluetooth
systemctl enable connman
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'gnome')
	install_desktop="
pacman -S --noconfirm $desktop_base gdm gnome-shell gnome-control-center gnome-keyring gnome-terminal nautilus
systemctl enable gdm
"
	;;
	'gnome-full')
	install_desktop="
pacman -S --noconfirm $desktop_base gdm gnome
systemctl enable gdm
"
	;;
	'i3')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit i3-wm i3status dmenu rxvt-unicode
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'kde')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter plasma-desktop plasma-nm plasma-pa kwin dolphin konsole konqueror bluedevil powerdevil xdg-desktop-portal-kde systemsettings discover plasma-browser-integration packagekit
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'kde-full')
	install_desktop="
pacman -S --noconfirm $desktop_base sddm plasma dolphin konsole konqueror
systemctl enable sddm
"
	;;
	'lxde')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'lxde-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lxdm lxde network-manager-applet
systemctl enable lxdm
"
	;;
	'lxqt')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet breeze-icons oxygen-icons
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'lxqt-full')
	install_desktop="
pacman -S --noconfirm $desktop_base sddm lxqt network-manager-applet breeze-icons oxygen-icons
systemctl enable sddm
"
	;;
	'mate')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter mate mate-terminal network-manager-applet mate-media mate-power-manager
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'mate-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter mate mate-terminal mate-extra network-manager-applet
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'xfce')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter xfce4 network-manager-applet xfce4-pulseaudio-plugin
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'xfce-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter xfce4 xfce4-goodies network-manager-applet
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<ARCHLINUXDESKTOP
#!/bin/bash
$install_desktop
ARCHLINUXDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "pacman -S --noconfirm $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface_pacman "linux"; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initramfs-"
initramfs_suffix=".img"
install_initcpio

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_artixlinux()
{
download_lxc_image archlinux current default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'ARTIXLINUXINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "artixlinux-linuxloops" > /etc/hostname
rm /etc/resolv.conf
echo "nameserver 8.8.8.8" > /etc/resolv.conf
sed -i 's@#en_US.UTF-8 UTF-8@en_US.UTF-8 UTF-8@g' /etc/locale.gen
locale-gen
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
rm /etc/pacman.conf /etc/pacman.d/mirrorlist
curl https://gitea.artixlinux.org/packagesP/pacman/raw/branch/master/trunk/pacman.conf -o /etc/pacman.conf
curl https://gitea.artixlinux.org/packagesA/artix-mirrorlist/raw/branch/master/trunk/mirrorlist -o /etc/pacman.d/mirrorlist
sed -i 's@SigLevel    = Required DatabaseOptional@SigLevel    = Never@g' /etc/pacman.conf
sed -i 's@#RemoteFileSigLevel = Required@RemoteFileSigLevel = Optional@g' /etc/pacman.conf
pacman -Scc --noconfirm && pacman -Syy
pacman -S --noconfirm artix-keyring
pacman-key --populate artix
pacman-key --lsign-key 95AEC5D0C1E294FC9F82B253573A673A53C01BC2
rm -f /etc/pacman.conf
curl https://gitea.artixlinux.org/packagesP/pacman/raw/branch/master/trunk/pacman.conf -o /etc/pacman.conf
pacman -Rdd --noconfirm systemd systemd-libs systemd-sysvcompat pacman-mirrorlist dbus
curl https://gitea.artixlinux.org/packagesA/artix-mirrorlist/raw/branch/master/trunk/mirrorlist -o /etc/pacman.d/mirrorlist
pacman -S --noconfirm base runit-system runit elogind-runit mkinitcpio archlinux-mirrorlist net-tools rsync nano lsb-release esysusers etmpfiles artix-branding-base
rm -f /etc/artix-release /etc/arch-release
pacman -S --noconfirm artix-archlinux-support
pacman-key --populate archlinux
cat >>/etc/pacman.conf <<'ARCHSUPPORT'
#[testing]
#Include = /etc/pacman.d/mirrorlist-arch


[extra]
Include = /etc/pacman.d/mirrorlist-arch


#[community-testing]
#Include = /etc/pacman.d/mirrorlist-arch


[community]
Include = /etc/pacman.d/mirrorlist-arch


#[multilib-testing]
#Include = /etc/pacman.d/mirrorlist-arch


#[multilib]
#Include = /etc/pacman.d/mirrorlist-arch
ARCHSUPPORT
pacman -Syy
pacman -Sl system | grep installed | cut -d" " -f2 | pacman -S --noconfirm -
pacman -Sl world | grep installed | cut -d" " -f2 | pacman -S --noconfirm -
pacman -Sl galaxy | grep installed | cut -d" " -f2 | pacman -S --noconfirm -
pacman -S --noconfirm linux linux-firmware ntfs-3g sudo iwd modemmanager networkmanager networkmanager-runit cryptsetup nano acpid curl thermald bash-completion ca-certificates gnupg polkit
ln -s /etc/runit/sv/NetworkManager /etc/runit/runsvdir/default/
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
ARTIXLINUXINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<ARTIXLINUXUSER
#!/bin/bash
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG audio,wheel '$username'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
ARTIXLINUXUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="gnome"; fi
desktop_base="xorg-server alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf pulseaudio-alsa adwaita-icon-theme ttf-dejavu udisks2"
case "$desktop" in
	'none')
	install_desktop=""
	;;
	'budgie')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit budgie-desktop arc-icon-theme nautilus tilix network-manager-applet
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'cinnamon')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit cinnamon gnome-terminal nemo
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'deepin')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit deepin deepin-terminal
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'deepin-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit deepin deepin-terminal deepin-extra
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'enlightenment')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit enlightenment terminology
pacman -R --noconfirm networkmanager
pacman -S --noconfirm bluez connman
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'gnome')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit gnome-shell gnome-control-center gnome-keyring gnome-terminal nautilus
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'gnome-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit gnome
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'i3')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit i3-wm i3status dmenu rxvt-unicode
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'kde')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit plasma-desktop plasma-nm plasma-pa kwin dolphin konsole konqueror bluedevil powerdevil xdg-desktop-portal-kde systemsettings discover plasma-browser-integration packagekit
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'kde-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit plasma dolphin konsole konqueror
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'lxde')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'lxde-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit lxde network-manager-applet
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'lxqt')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet breeze-icons oxygen-icons
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'lxqt-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit lxqt network-manager-applet breeze-icons oxygen-icons
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'mate')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit mate mate-terminal network-manager-applet mate-media mate-power-manager
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'mate-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit mate mate-terminal mate-extra network-manager-applet
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'xfce')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit xfce4 network-manager-applet xfce4-pulseaudio-plugin
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'xfce-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lightdm-runit xfce4 xfce4-goodies network-manager-applet
ln -s /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<ARTIXLINUXDESKTOP
#!/bin/bash
$install_desktop
ARTIXLINUXDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "pacman -S --noconfirm $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface_pacman "linux"; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initramfs-"
initramfs_suffix=".img"
install_initcpio

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_debian()
{
download_lxc_image debian bullseye default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'DEBIANINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "debian-linuxloops" > /etc/hostname
echo "nameserver 8.8.8.8" > /etc/resolv.conf
locale-gen
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
sed -i 's@ main@ main contrib non-free@g' /etc/apt/sources.list
cat >/etc/apt/apt.conf.d/99linuxloops <<'RECOMMENDS'
APT::Install-Recommends "0";
APT::Get::Install-Recommends "false";
RECOMMENDS
apt update
yes | apt dist-upgrade
yes | DEBIAN_FRONTEND=noninteractive apt install apt-utils
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 firmware-linux-nonfree firmware-atheros firmware-iwlwifi firmware-realtek ntfs-3g bash sudo network-manager binfmt-support cryptsetup nano acpid curl thermald bash-completion ca-certificates gpg
systemctl enable acpid
systemctl enable NetworkManager
systemctl enable thermald
yes | DEBIAN_FRONTEND=noninteractive apt purge vim
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
DEBIANINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<DEBIANUSER
#!/bin/bash
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
DEBIANUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="gnome"; fi
desktop_base="xserver-xorg xserver-xorg-legacy xserver-xorg-video-all mesa-vulkan-drivers va-driver-all vdpau-driver-all libasound2 alsa-utils alsa-ucm-conf alsa-topology-conf pulseaudio desktop-base network-manager at-spi2-core adwaita-icon-theme udisks2"
case "$desktop" in
	'none')
	install_desktop=""
	;;
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm budgie-desktop arc-theme nautilus tilix paper-icon-theme
cat >/usr/share/glib-2.0/schemas/99_budgie.gschema.override <<'DCONF'
[org.gnome.desktop.interface]
gtk-theme=\"Arc\"
icon-theme=\"Arc\"
DCONF
glib-compile-schemas /usr/share/glib-2.0/schemas/
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm cinnamon gnome-terminal nemo
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-cinnamon-desktop
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman bluez
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 gnome-session gnome-shell gnome-control-center gnome-terminal nautilus gnome-icon-theme
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-gnome-desktop
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm kde-plasma-desktop kwin-x11 systemsettings plasma-nm plasma-discover konsole konqueror kwalletmanager qml-module-qt-labs-platform powerdevil kmix
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-kde-desktop
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lxde-core lxterminal pcmanfm lxde-icon-theme network-manager-gnome lxappearance
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-lxde-desktop
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lxqt-core qterminal pcmanfm-qt lxqt-theme-debian lxde-icon-theme network-manager-gnome mutter lxqt-powermanagement lxqt-themes
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'lxqt-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-lxqt-desktop network-manager-gnome
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm mate-desktop mate-session-manager marco mate-control-center mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja ayatana-indicator-application ayatana-indicator-bluetooth ayatana-indicator-datetime ayatana-indicator-power ayatana-indicator-session ayatana-indicator-sound network-manager-gnome mate-media mate-power-manager
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-mate-desktop
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm xfce4 xfce4-power-manager xfce4-terminal thunar xfce4-notifyd network-manager-gnome greybird-gtk-theme elementary-xfce-icon-theme
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-xfce-desktop
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<DEBIANDESKTOP
#!/bin/bash
$install_desktop
DEBIANDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "yes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface_apt "linux-headers-* linux-image-*"; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initrd.img-"
initramfs_suffix=""
install_initramfstools

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_devuan()
{
download_lxc_image debian bullseye default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'DEVUANINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "devuan-linuxloops" > /etc/hostname
echo "nameserver 8.8.8.8" > /etc/resolv.conf
locale-gen
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
cat >/etc/apt/sources.list <<'SOURCES'
deb http://deb.devuan.org/merged chimaera main
deb http://deb.devuan.org/merged chimaera-updates main
deb http://deb.devuan.org/merged chimaera-security main
#deb http://deb.devuan.org/merged chimaera-backports main
SOURCES
sed -i 's@ main@ main contrib non-free@g' /etc/apt/sources.list
cat >/etc/apt/apt.conf.d/99linuxloops <<'RECOMMENDS'
APT::Install-Recommends "0";
APT::Get::Install-Recommends "false";
RECOMMENDS
apt-get update --allow-insecure-repositories
yes | DEBIAN_FRONTEND=noninteractive apt-get install devuan-keyring --allow-unauthenticated
yes | DEBIAN_FRONTEND=noninteractive apt install --reinstall apt="$(apt show apt -a 2>/dev/null | grep Version | grep devuan | cut -d' ' -f2)" apt-transport-https="$(apt show apt -a 2>/dev/null | grep Version | grep devuan | cut -d' ' -f2)" apt-utils="$(apt show apt -a 2>/dev/null | grep Version | grep devuan | cut -d' ' -f2)"  libapt-pkg6.0="$(apt show apt -a 2>/dev/null | grep Version | grep devuan | cut -d' ' -f2)" init="$(apt show init -a 2>/dev/null | grep Version | grep devuan | cut -d' ' -f2)"
yes | DEBIAN_FRONTEND=noninteractive apt install sysvinit-core eudev
apt-get update
yes | apt dist-upgrade
yes | apt autoremove
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 firmware-linux-nonfree firmware-atheros firmware-iwlwifi firmware-realtek ntfs-3g bash sudo network-manager binfmt-support cryptsetup nano acpid curl thermald bash-completion ca-certificates gpg
yes | DEBIAN_FRONTEND=noninteractive apt purge vim
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
DEVUANINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<DEVUANUSER
#!/bin/bash
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
DEVUANUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="gnome"; fi
desktop_base="xserver-xorg xserver-xorg-legacy xserver-xorg-video-all mesa-vulkan-drivers va-driver-all vdpau-driver-all libasound2 alsa-utils alsa-ucm-conf alsa-topology-conf pulseaudio desktop-base network-manager at-spi2-core adwaita-icon-theme udisks2"
case "$desktop" in
	'none')
	install_desktop=""
	;;
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm budgie-desktop arc-theme nautilus tilix paper-icon-theme
cat >/usr/share/glib-2.0/schemas/99_budgie.gschema.override <<'DCONF'
[org.gnome.desktop.interface]
gtk-theme=\"Arc\"
icon-theme=\"Arc\"
DCONF
glib-compile-schemas /usr/share/glib-2.0/schemas/
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm cinnamon gnome-terminal nemo
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-cinnamon-desktop
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman bluez
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 gnome-session gnome-shell gnome-control-center gnome-terminal nautilus gnome-icon-theme
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-gnome-desktop
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm kde-plasma-desktop kwin-x11 systemsettings plasma-nm plasma-discover konsole konqueror kwalletmanager qml-module-qt-labs-platform powerdevil kmix
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-kde-desktop
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lxde-core lxterminal pcmanfm lxde-icon-theme network-manager-gnome lxappearance
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-lxde-desktop
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lxqt-core qterminal pcmanfm-qt lxqt-theme-debian lxde-icon-theme network-manager-gnome mutter lxqt-powermanagement lxqt-themes
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'lxqt-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-lxqt-desktop network-manager-gnome
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm mate-desktop mate-session-manager marco mate-control-center mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja ayatana-indicator-application ayatana-indicator-bluetooth ayatana-indicator-datetime ayatana-indicator-power ayatana-indicator-session ayatana-indicator-sound network-manager-gnome mate-media mate-power-manager
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-mate-desktop
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm xfce4 xfce4-power-manager xfce4-terminal thunar xfce4-notifyd network-manager-gnome greybird-gtk-theme elementary-xfce-icon-theme
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-xfce-desktop
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<DEVUANDESKTOP
#!/bin/bash
$install_desktop
DEVUANDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "yes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface_apt "linux-headers-* linux-image-*"; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initrd.img-"
initramfs_suffix=""
install_initramfstools

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_elementary()
{
download_lxc_image ubuntu focal default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'ELEMENTARYINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "elementary-linuxloops" > /etc/hostname
mkdir -p /run/systemd/resolve
echo "nameserver 8.8.8.8" > /run/systemd/resolve/stub-resolv.conf
locale-gen
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
yes | DEBIAN_FRONTEND=noninteractive apt install software-properties-common
add-apt-repository ppa:elementary-os/stable -y
add-apt-repository ppa:elementary-os/os-patches -y
yes | DEBIAN_FRONTEND=noninteractive apt install --reinstall apt
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
yes | apt install linux-generic-hwe-20.04 linux-firmware ntfs-3g sudo network-manager cryptsetup nano acpid curl thermald bash-completion ca-certificates gpg
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
ELEMENTARYINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<ELEMENTARYUSER
#!/bin/bash
userdel -r -f ubuntu
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
ELEMENTARYUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="full"; fi
case "$desktop" in
	'full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install pantheon-greeter elementary-desktop
yes | DEBIAN_FRONTEND=noninteractive apt purge gdm3 ubuntu-session
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<ELEMENTARYDESKTOP
#!/bin/bash
$install_desktop
ELEMENTARYDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "yes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface_apt "linux-generic-* linux-headers-* linux-image-* linux-modules-*"; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initrd.img-"
initramfs_suffix=""
install_initramfstools

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_fedora()
{
download_lxc_image fedora 35 default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'FEDORAINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "fedora-linuxloops" > /etc/hostname
mkdir -p /run/systemd/resolve
echo "nameserver 8.8.8.8" > /run/systemd/resolve/resolv.conf
yes | dnf update
yes | dnf install kernel linux-firmware ntfs-3g sudo NetworkManager-bluetooth NetworkManager-wifi cryptsetup e2fsprogs ntfsprogs nano acpid curl thermald ca-certificates gpg bash-completion dnf-plugins-core ipw2100-firmware ipw2200-firmware iwl100-firmware iwl1000-firmware iwl105-firmware iwl135-firmware iwl2000-firmware iwl2030-firmware iwl3160-firmware iwl3945-firmware iwl4965-firmware iwl5000-firmware iwl5150-firmware iwl6000-firmware iwl6000g2a-firmware iwl6000g2b-firmware iwl6050-firmware iwl7260-firmware iwlax2xx-firmware b43-openfwwf
systemctl disable systemd-networkd-wait-online
systemctl mask systemd-networkd-wait-online
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
yes | dnf autoremove
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
FEDORAINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<FEDORAUSER
#!/bin/bash
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
FEDORAUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="gnome"; fi
desktop_base="xorg-x11-drivers mesa-dri-drivers xorg-x11-drv-amdgpu xdg-user-dirs-gtk alsa-lib alsa-utils alsa-sof-firmware alsa-topology alsa-ucm pipewire-pulseaudio udisks2 dejavu-sans-mono-fonts dejavu-serif-fonts"
case "$desktop" in
	'none')
	install_desktop=""
	;;
	'cinnamon')
	install_desktop="
yes | dnf install $desktop_base lightdm-gtk-greeter cinnamon clutter-gtk gnome-terminal nemo paper-icon-theme
"
	;;
	'cinnamon-full')
	install_desktop="
yes | dnf install $desktop_base @cinnamon-desktop-environment
"
	;;
	'gnome')
	install_desktop="
yes | dnf install $desktop_base gdm gnome-shell nautilus gnome-terminal
"
	;;
	'gnome-full')
	install_desktop="
yes | dnf install $desktop_base @gnome-desktop
"
	;;
	'kde')
	install_desktop="
yes | dnf install $desktop_base lightdm-gtk-greeter plasma-desktop plasma-discover plasma-nm dolphin konsole
"
	;;
	'kde-full')
	install_desktop="
yes | dnf install $desktop_base @kde-desktop-environment
"
	;;
	'lxde')
	install_desktop="
yes | dnf install $desktop_base lightdm-gtk-greeter lxde-common network-manager-applet lxterminal pcmanfm
"
	;;
	'lxde-full')
	install_desktop="
yes | dnf install $desktop_base @lxde-desktop-environment
"
	;;
	'lxqt')
	install_desktop="
yes | dnf install $desktop_base lightdm-gtk-greeter lxqt-panel lxqt-session lxqt-qtplugin lxqt-powermanagement qterminal network-manager-applet lxqt-themes-fedora
"
	;;
	'lxqt-full')
	install_desktop="
yes | dnf install $desktop_base @lxqt-desktop-environment
"
	;;
	'mate')
	install_desktop="
yes | dnf install $desktop_base lightdm-gtk-greeter mate-desktop marco network-manager-applet mate-session-manager mate-media mate-power-manager caja mate-terminal
"
	;;
	'mate-full')
	install_desktop="
yes | dnf install $desktop_base @mate-desktop-environment
"
	;;
	'xfce')
	install_desktop="
yes | dnf install $desktop_base lightdm-gtk-greeter xfdesktop xfce4-session xfce4-settings xfce4-notifyd yaru-theme network-manager-applet thunar xfce4-appfinder xfce4-pulseaudio-plugin xfce4-power-manager xfce4-terminal
"
	;;
	'xfce-full')
	install_desktop="
yes | dnf install $desktop_base @xfce-desktop-environment
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<FEDORADESKTOP
#!/bin/bash
$install_desktop
FEDORADESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "yes | dnf install $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface_dnf "kernel"; fi

cmdline_extra="selinux=0 $CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initramfs-"
initramfs_suffix=".img"
install_dracut

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_gentoo()
{
download_lxc_image gentoo current systemd

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'GENTOOINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "gentoo-linuxloops" > /etc/hostname
mkdir -p /run/systemd/resolve
echo "nameserver 8.8.8.8" > /run/systemd/resolve/resolv.conf
echo 'en_US.UTF-8 UTF-8' > /etc/locale.gen
locale-gen
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
env-update
source /etc/profile
mkdir /etc/portage/package.license 
echo '*/* *' >> /etc/portage/package.license/custom
echo 'VIDEO_CARDS="amdgpu dummy fbdev intel nouveau qxl radeon radeonsi vesa virtualbox vmware"' >> /etc/portage/make.conf
echo 'USE="alsa appindicator bluetooth cairo cdda client cups dbus drm eds egl -elogind gles2 gnome-online-accounts gtk gtk3 icu introspection jpeg libnotify libkms minizip modemmanager networkmanager ogg opengl policykit pulseaudio qml raw systemd text theora tracker udev udisks vala wayland X xa"' >> /etc/portage/make.conf
emerge --sync
emerge --oneshot sys-apps/portage
emerge -C libcrypt
emerge libcrypt
eselect profile set default/linux/amd64/17.1
emerge -uDN @world
emerge sys-kernel/gentoo-kernel-bin sys-kernel/linux-firmware sys-fs/ntfs3g net-misc/networkmanager sys-fs/cryptsetup app-editors/nano dev-vcs/git sys-power/acpid net-misc/curl sys-power/thermald app-shells/bash-completion app-misc/ca-certificates app-crypt/gnupg
systemctl enable acpid
systemctl enable NetworkManager
systemctl enable thermald
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
GENTOOINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<GENTOOUSER
#!/bin/bash
sed -i 's/^password/#password/g' /etc/pam.d/system-auth
echo 'password       required        pam_unix.so nullok sha512 shadow' >> /etc/pam.d/system-auth
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
GENTOOUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="gnome"; fi
case "$desktop" in
	'none')
	install_desktop=""
	;;
	'cinnamon')
	install_desktop="
emerge -uN x11-misc/lightdm gnome-extra/cinnamon x11-terms/gnome-terminal gnome-extra/nemo
systemctl enable lightdm
"
	;;
	'enlightenment')
	install_desktop="
echo 'USE=\"\$USE gles2-only -opengl\"' >> /etc/portage/make.conf
emerge -uN x11-misc/lightdm x11-wm/enlightenment x11-terms/terminology
systemctl enable lightdm
"
	;;
	'gnome')
	install_desktop="
emerge -uN gnome-base/gdm gnome-base/gnome x11-terms/gnome-terminal gnome-base/nautilus
systemctl enable gdm
"
	;;
	'kde')
	install_desktop="
emerge -uN x11-misc/lightdm kde-plasma/plasma-meta kde-apps/konsole kde-plasma/plasma-nm kde-apps/dolphin kde-plasma/discover
systemctl enable lightdm
"
	;;
	'lxqt')
	install_desktop="
emerge -uN x11-misc/lightdm lxqt-base/lxqt-meta x11-terms/qterminal gnome-extra/nm-applet lxqt-base/lxqt-powermanagement
systemctl enable lightdm
"
	;;
	'mate')
	install_desktop="
emerge -uN x11-misc/lightdm mate-base/mate x11-terms/mate-terminal gnome-extra/nm-applet mate-extra/mate-power-manager mate-extra/mate-media
systemctl enable lightdm
"
	;;
	'xfce')
	install_desktop="
emerge -uN x11-misc/lightdm xfce-base/xfce4-meta x11-terms/xfce4-terminal gnome-extra/nm-applet xfce-extra/xfce4-power-manager
systemctl enable lightdm
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<GENTOODESKTOP
#!/bin/bash
$install_desktop
GENTOODESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "emerge $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initramfs-"
initramfs_suffix=".img"
install_dracut

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_kali()
{
download_lxc_image kali current default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'KALIINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "kali-linuxloops" > /etc/hostname
echo "nameserver 8.8.8.8" > /etc/resolv.conf
locale-gen
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
sed -i 's@ main@ main contrib non-free@g' /etc/apt/sources.list
cat >/etc/apt/apt.conf.d/99linuxloops <<'RECOMMENDS'
APT::Install-Recommends "0";
APT::Get::Install-Recommends "false";
RECOMMENDS
apt update
yes | apt dist-upgrade
yes | DEBIAN_FRONTEND=noninteractive apt install apt-utils
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 firmware-linux-nonfree firmware-atheros firmware-iwlwifi firmware-realtek ntfs-3g bash sudo network-manager binfmt-support cryptsetup nano kali-defaults acpid curl thermald bash-completion ca-certificates gpg
systemctl enable acpid
systemctl enable NetworkManager
systemctl enable thermald
yes | DEBIAN_FRONTEND=noninteractive apt purge vim
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
KALIINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<KALIUSER
#!/bin/bash
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
KALIUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="gnome"; fi
desktop_base="xserver-xorg xserver-xorg-legacy xserver-xorg-video-all mesa-vulkan-drivers va-driver-all vdpau-driver-all libasound2 alsa-utils alsa-ucm-conf alsa-topology-conf pulseaudio desktop-base network-manager at-spi2-core adwaita-icon-theme udisks2 kali-defaults-desktop kali-themes-common"
case "$desktop" in
	'none')
	install_desktop=""
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm cinnamon gnome-terminal nemo
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-cinnamon-desktop kali-tools-top10
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm kali-desktop-e17 terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman bluez
systemctl enable bluetooth
systemctl enable connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'enlightenment-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm kali-tools-top10 kali-desktop-e17 terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman bluez
systemctl enable bluetooth
systemctl enable connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 kali-desktop-gnome
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base kali-tools-top10 gdm3 kali-desktop-gnome
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm kali-desktop-kde kwin-x11 kmix powerdevil
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm kali-tools-top10 kali-desktop-kde kwin-x11 powerdevil
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm kali-desktop-lxde
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base kali-tools-top10 lightdm kali-desktop-lxde
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm kali-desktop-mate mate-media mate-power-manager
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm kali-tools-top10 kali-desktop-mate mate-media mate-power-manager
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm kali-desktop-xfce
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm kali-tools-top10 kali-desktop-xfce
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<KALIDESKTOP
#!/bin/bash
$install_desktop
KALIDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "yes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface_apt "linux-headers-* linux-image-*"; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initrd.img-"
initramfs_suffix=""
install_initramfstools

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_kde_neon()
{
download_lxc_image ubuntu focal default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'KDE_NEONINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "ubuntu-linuxloops" > /etc/hostname
mkdir -p /run/systemd/resolve
echo "nameserver 8.8.8.8" > /run/systemd/resolve/stub-resolv.conf
locale-gen
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
yes | DEBIAN_FRONTEND=noninteractive apt install gpg dirmngr gpg-agent
cat >/etc/apt/sources.list.d/neon.list <<'RECOMMENDS'
deb http://archive.neon.kde.org/user/ focal main
RECOMMENDS
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E6D4736255751E5D
apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic-hwe-20.04 linux-firmware initramfs-tools ntfs-3g sudo cryptsetup nano acpid curl thermald bash-completion ca-certificates gpg
yes | DEBIAN_FRONTEND=noninteractive apt purge vim
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
KDE_NEONINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<KDE_NEONUSER
#!/bin/bash
userdel -r -f ubuntu
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
KDE_NEONUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="full"; fi
#desktop_base="xserver-xorg xserver-xorg-legacy xserver-xorg-video-all mesa-vulkan-drivers alsa alsa-utils alsa-ucm-conf alsa-topology-conf pulseaudio desktop-base network-manager at-spi2-core adwaita-icon-theme-full language-selector-common udisks2 ttf-ubuntu-font-family"
case "$desktop" in
	'full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install neon-desktop
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<KDE_NEONDESKTOP
#!/bin/bash
$install_desktop
KDE_NEONDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "yes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface_apt "linux-generic-* linux-headers-* linux-image-* linux-modules-*"; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initrd.img-"
initramfs_suffix=""
install_initramfstools

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_manjaro()
{
download_lxc_image archlinux current default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'MANJAROINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "manjaro-linuxloops" > /etc/hostname
mkdir -p /run/systemd/resolve
echo "nameserver 8.8.8.8" > /run/systemd/resolve/resolv.conf
sed -i 's@#en_US.UTF-8 UTF-8@en_US.UTF-8 UTF-8@g' /etc/locale.gen
locale-gen
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
pacman -Rdd --noconfirm pacman-mirrorlist
echo 'Server = https://mirrors.manjaro.org/repo/stable/$repo/$arch' > /etc/pacman.d/mirrorlist
curl -L https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro.gpg?inline=false -o /usr/share/pacman/keyrings/manjaro.gpg
curl -L https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro-revoked?inline=false -o /usr/share/pacman/keyrings/manjaro-revoked
curl -L https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro-trusted?inline=false -o /usr/share/pacman/keyrings/manjaro-trusted
rm -r /etc/pacman.d/gnupg
pacman-key --init
pacman-key --populate
rm /usr/share/pacman/keyrings/manjaro*
pacman -Syy
pacman -S --noconfirm manjaro-release manjaro-system pacman
curl -L https://gitlab.manjaro.org/packages/core/pacman/-/raw/master/pacman.conf?inline=false -o /etc/pacman.conf
pacman-key --init
pacman-key --populate
pacman -Syy
pacman -Qnq | pacman -S --noconfirm -
pacman -Syu --noconfirm linux510 linux-firmware ntfs-3g sudo iwd modemmanager networkmanager cryptsetup nano acpid curl thermald bash-completion ca-certificates gnupg polkit
systemctl enable acpid
systemctl enable NetworkManager
systemctl enable thermald
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
MANJAROINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<MANJAROUSER
#!/bin/bash
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
MANJAROUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="gnome"; fi
desktop_base="xorg-server alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf pulseaudio-alsa adwaita-icon-theme ttf-dejavu udisks2"
case "$desktop" in
	'none')
	install_desktop=""
	;;
	'budgie')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter budgie-desktop network-manager-applet tilix nautilus arc-gtk-theme arc-icon-theme manjaro-settings-manager
cat >/usr/share/glib-2.0/schemas/99_budgie.gschema.override <<'DCONF'
[org.gnome.desktop.interface]
gtk-theme=\"Arc\"
icon-theme=\"Arc\"
DCONF
glib-compile-schemas /usr/share/glib-2.0/schemas/
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'budgie-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter budgie-desktop budgie-extras network-manager-applet tilix nautilus arc-gtk-theme arc-icon-theme manjaro-settings-manager
cat >/usr/share/glib-2.0/schemas/99_budgie.gschema.override <<'DCONF'
[org.gnome.desktop.interface]
gtk-theme=\"Arc\"
icon-theme=\"Arc\"
DCONF
glib-compile-schemas /usr/share/glib-2.0/schemas/
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'cinnamon')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter cinnamon manjaro-settings-manager manjaro-cinnamon-settings adapta-maia-theme kvantum-manjaro gnome-terminal nemo
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'deepin')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter deepin deepin-terminal
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'deepin-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter deepin deepin-terminal deepin-extra
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'deepin-full')
	install_desktop="
pacman -S --noconfirm $desktop_base deepin deepin-extra deepin-manjaro deepin-terminal
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'enlightenment')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter enlightenment terminology
pacman -R --noconfirm networkmanager
pacman -S --noconfirm bluez connman
systemctl enable bluetooth
systemctl enable connman
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'gnome')
	install_desktop="
pacman -S --noconfirm $desktop_base gdm gnome manjaro-gnome-assets manjaro-gdm-theme manjaro-settings-manager
systemctl enable gdm
"
	;;
	'gnome-full')
	install_desktop="
pacman -S --noconfirm $desktop_base gdm gnome gnome-extra manjaro-gnome-assets manjaro-gdm-theme manjaro-settings-manager
systemctl enable gdm
"
	;;
	'kde')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter plasma manjaro-kde-settings manjaro-settings-manager-knotifier manjaro-settings-manager-kcm dolphin konsole konqueror
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'kde-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter plasma kde-applications manjaro-kde-settings manjaro-settings-manager-knotifier manjaro-settings-manager-kcm dolphin konsole konqueror
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'lxde')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lxde manjaro-lxde-logout-banner manjaro-lxde-xfce4-notifyd manjaro-lxde-xfce4-volumed-pulse manjaro-settings-manager manjaro-settings-manager-notifier manjaro-lxde-desktop-settings arc-maia-icon-theme lxterminal pcmanfm network-manager-applet
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'lxqt')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter lxqt manjaro-lxqt-config manjaro-lxqt-desktop-settings manjaro-settings-manager-notifier manjaro-openbox-adapta-maia papirus-icon-theme papirus-maia-icon-theme qterminal pcmanfm-qt network-manager-applet
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'mate')
	install_desktop="
pacman -S --noconfirm  $desktop_base lightdm-gtk-greeter mate arc-maia-icon-theme papirus-maia-icon-theme mate-terminal caja mate-control-center network-manager-applet mate-media mate-power-manager manjaro-settings-manager manjaro-settings-manager-notifier manjaro-mate-settings matcha-gtk-theme
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'mate-full')
	install_desktop="
pacman -S --noconfirm  $desktop_base lightdm-gtk-greeter mate mate-extra arc-maia-icon-theme papirus-maia-icon-theme mate-terminal caja mate-control-center network-manager-applet mate-media mate-power-manager manjaro-settings-manager manjaro-settings-manager-notifier manjaro-mate-settings matcha-gtk-theme
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'xfce')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter xfce4-gtk3 manjaro-xfce-gtk3-settings manjaro-settings-manager xfce4-terminal xfce4-notifyd-gtk3 xfce4-whiskermenu-plugin-gtk3 thunar xfce4-power-manager xfce4-pulseaudio-plugin network-manager-applet
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
	'xfce-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm-gtk-greeter xfce4-gtk3 xfce4-goodies manjaro-xfce-gtk3-settings manjaro-settings-manager xfce4-terminal xfce4-notifyd-gtk3 xfce4-whiskermenu-plugin-gtk3 thunar xfce4-power-manager xfce4-pulseaudio-plugin network-manager-applet
systemctl enable lightdm
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-gtk-greeter\n' > /etc/lightdm/lightdm.conf
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<MANJARODESKTOP
#!/bin/bash
$install_desktop
MANJARODESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "pacman -S --noconfirm $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface_pacman "linux510"; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initramfs-"
initramfs_suffix=".img"
install_initcpio

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_mint()
{
download_lxc_image mint uma default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'MINTINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "mint-linuxloops" > /etc/hostname
mkdir -p /run/systemd/resolve
echo "nameserver 8.8.8.8" > /run/systemd/resolve/stub-resolv.conf
locale-gen
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
cat >/etc/apt/apt.conf.d/99linuxloops <<'RECOMMENDS'
APT::Install-Recommends "0";
APT::Get::Install-Recommends "false";
RECOMMENDS
apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
yes | DEBIAN_FRONTEND=noninteractive apt install mintsystem
cp /usr/share/linuxmint/mintsystem/apt/official-package-repositories.pref /etc/apt/preferences.d/official-package-repositories.pref
cp /etc/apt/sources.list /etc/apt/sources.list.d/official-package-repositories.list
echo '' > /etc/apt/sources.list
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic-hwe-20.04 linux-firmware initramfs-tools ntfs-3g sudo cryptsetup nano acpid curl thermald bash-completion ca-certificates gpg
yes | DEBIAN_FRONTEND=noninteractive apt purge vim
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
MINTINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<MINTUSER
#!/bin/bash
userdel -r -f ubuntu
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
MINTUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="gnome"; fi
desktop_base="xserver-xorg xserver-xorg-legacy xserver-xorg-video-all mesa-vulkan-drivers alsa alsa-utils alsa-ucm-conf alsa-topology-conf pulseaudio desktop-base network-manager at-spi2-core adwaita-icon-theme-full papirus-icon-theme language-selector-common udisks2 ttf-ubuntu-font-family mint-themes mint-x-icons mint-y-icons mint-backgrounds-uma"
case "$desktop" in
	'none')
	install_desktop=""
	;;
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter budgie-desktop ubuntu-budgie-themes pocillo-icon-theme nautilus tilix update-manager
cat >/usr/share/glib-2.0/schemas/99_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.interface]
gtk-theme=\"Pocillo\"
icon-theme=\"Pocillo\"
DCONF
glib-compile-schemas /usr/share/glib-2.0/schemas/
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter cinnamon gnome-terminal nemo update-manager
"
	;;
	'cinnamon-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter cinnamon-desktop-environment
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter enlightenment terminology update-manager
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman bluez
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 gnome-session gnome-shell gnome-control-center gnome-terminal nautilus gnome-icon-theme dmz-cursor-theme update-manager gnome-keyring
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter kde-plasma-desktop kwin-x11 systemsettings plasma-nm plasma-discover konsole konqueror kwalletmanager qml-module-qt-labs-platform
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter lxde-core lxterminal pcmanfm update-manager lxde-icon-theme xubuntu-icon-theme network-manager-gnome lxappearance
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter lxqt-core qterminal pcmanfm-qt update-manager lxqt-theme-debian lxde-icon-theme xubuntu-icon-theme network-manager-gnome mutter
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter mate-desktop mate-session-manager marco mate-control-center mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja update-manager indicator-application indicator-bluetooth indicator-datetime indicator-power indicator-session indicator-sound network-manager-gnome mintmenu
"
	;;
	'mate-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base mate-desktop-environment
"
	;;
	'ubuntu')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base ubuntu-desktop-minimal gnome-terminal nautilus gnome-icon-theme dmz-cursor-theme update-manager yaru-theme-gtk yaru-theme-icon yaru-theme-sound
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter xfce4 xfce4-terminal thunar xfce4-notifyd network-manager-gnome greybird-gtk-theme elementary-xfce-icon-theme
"
	;;
	'xfce-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base xfce-desktop-environment
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<MINTDESKTOP
#!/bin/bash
$install_desktop
MINTDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "yes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface_apt "linux-generic-* linux-headers-* linux-image-* linux-modules-*"; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initrd.img-"
initramfs_suffix=""
install_initramfstools

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_mxlinux()
{
download_lxc_image debian bullseye default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'MXLINUXINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "mxlinux-linuxloops" > /etc/hostname
echo "nameserver 8.8.8.8" > /etc/resolv.conf
locale-gen
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
sed -i 's@ main@ main contrib non-free@g' /etc/apt/sources.list
apt-get update
yes | DEBIAN_FRONTEND=noninteractive apt install curl gnupg
cat >>/etc/apt/sources.list <<'SOURCES'
deb http://mxrepo.com/mx/repo/ bullseye main non-free
SOURCES
curl -L http://teharris.net/mx21repo.asc -o /tmp/mx21repo.asc
apt-key add /tmp/mx21repo.asc
cat >/etc/apt/apt.conf.d/99linuxloops <<'RECOMMENDS'
APT::Install-Recommends "0";
APT::Get::Install-Recommends "false";
RECOMMENDS
apt-get update
yes | apt dist-upgrade
yes | apt autoremove
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 firmware-linux-nonfree firmware-atheros firmware-iwlwifi firmware-realtek ntfs-3g bash sudo network-manager binfmt-support cryptsetup nano acpid curl thermald bash-completion ca-certificates gpg
yes | DEBIAN_FRONTEND=noninteractive apt purge vim
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
MXLINUXINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<MXLINUXUSER
#!/bin/bash
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG audio,sudo '$username'
MXLINUXUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="gnome"; fi
desktop_base="xserver-xorg xserver-xorg-legacy xserver-xorg-video-all mesa-vulkan-drivers va-driver-all vdpau-driver-all libasound2 alsa-utils alsa-ucm-conf alsa-topology-conf pulseaudio desktop-base network-manager at-spi2-core adwaita-icon-theme udisks2"
case "$desktop" in
	'none')
	install_desktop=""
	;;
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm budgie-desktop arc-theme nautilus tilix paper-icon-theme
cat >/usr/share/glib-2.0/schemas/99_budgie.gschema.override <<'DCONF'
[org.gnome.desktop.interface]
gtk-theme=\"Arc\"
icon-theme=\"Arc\"
DCONF
glib-compile-schemas /usr/share/glib-2.0/schemas/
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm cinnamon gnome-terminal nemo
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-cinnamon-desktop
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman bluez
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 gnome-session gnome-shell gnome-control-center gnome-terminal nautilus gnome-icon-theme
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-gnome-desktop
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm kde-plasma-desktop kwin-x11 systemsettings plasma-nm plasma-discover konsole konqueror kwalletmanager qml-module-qt-labs-platform powerdevil kmix
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-kde-desktop
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lxde-core lxterminal pcmanfm lxde-icon-theme network-manager-gnome lxappearance
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-lxde-desktop
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lxqt-core qterminal pcmanfm-qt lxqt-theme-debian lxde-icon-theme network-manager-gnome mutter lxqt-powermanagement lxqt-themes
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'lxqt-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-lxqt-desktop network-manager-gnome
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm mate-desktop mate-session-manager marco mate-control-center mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja ayatana-indicator-application ayatana-indicator-bluetooth ayatana-indicator-datetime ayatana-indicator-power ayatana-indicator-session ayatana-indicator-sound network-manager-gnome mate-media mate-power-manager
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-mate-desktop
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm xfce4 xfce4-power-manager xfce4-terminal thunar xfce4-notifyd network-manager-gnome greybird-gtk-theme elementary-xfce-icon-theme
echo -e '[Seat:*]\ngreeter-hide-users=false\n' >> /etc/lightdm/lightdm.conf
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base task-xfce-desktop
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<MXLINUXDESKTOP
#!/bin/bash
$install_desktop
MXLINUXDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "yes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface_apt "linux-headers-* linux-image-*"; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initrd.img-"
initramfs_suffix=""
install_initramfstools

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_nixos()
{
mount --bind "$linuxloopsdir"/chroot "$linuxloopsdir"/chroot
mount --make-rprivate "$linuxloopsdir"/chroot
mkdir -p "$linuxloopsdir"/chroot/installroot/mnt
mount --bind "$linuxloopsdir"/chroot/installroot "$linuxloopsdir"/chroot/installroot
mount --make-rprivate "$linuxloopsdir"/chroot/installroot

download_lxc_image archlinux current default /installroot

mount --rbind "$linuxloopsdir"/chroot "$linuxloopsdir"/chroot/installroot/mnt
mount --make-rprivate "$linuxloopsdir"/chroot/installroot/mnt

mount_chroot /installroot

cat >"$linuxloopsdir"/chroot/installroot/tmp/init <<'NIXOSINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
mkdir -p /run/systemd/resolve
echo "nameserver 8.8.8.8" > /run/systemd/resolve/resolv.conf
useradd -s /bin/bash -m 'temp'
echo -e 'temp\ntemp' | passwd 'temp'
echo "temp      ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/90-wheel
groupadd -g 30000 --system nixbld
for i in $(seq 1 32); do
  useradd \
    --home-dir /var/empty \
    --gid 30000 \
    --groups nixbld \
    --no-user-group \
    --system \
    --shell /usr/sbin/nologin \
    --uid $((30000 + i)) \
    --password "!" \
    nixbld$i
done
sudo -i -u temp bash << NIX_INSTALL
sudo mkdir -p /nix && sudo chown -R temp /nix
curl -L https://nixos.org/nix/install | sh
. /home/temp/.nix-profile/etc/profile.d/nix.sh
nix-channel --remove nixpkgs
nix-channel --add https://nixos.org/channels/nixos-21.11 nixos
nix-channel --update
nix-env -iA nixos.nixos-install-tools
sudo nixos-install -I nixpkgs=/nix/var/nix/profiles/per-user/temp/channels/nixos --root /mnt
sudo nixos-enter << NIX_PASSWD
mkdir /tmp
nix-channel --update
/installroot/tmp_linuxloops/install_user
if [ -f /installroot/tmp_linuxloops/install_desktop ]; then /installroot/tmp_linuxloops/install_desktop; fi
if [ -f /installroot/tmp_linuxloops/install_custom ]; then /installroot/tmp_linuxloops/install_custom; fi
exit
NIX_PASSWD
NIX_INSTALL
/tmp/cleanup
exit
NIXOSINIT
chmod 0755 "$linuxloopsdir"/chroot/installroot/tmp/init

mkdir "$linuxloopsdir"/chroot/installroot/tmp_linuxloops

cat >"$linuxloopsdir"/chroot/installroot/tmp_linuxloops/install_user <<NIXOSUSER
echo -e '$userpass\n$userpass' | passwd '$username'
NIXOSUSER
chmod 0755 "$linuxloopsdir"/chroot/installroot/tmp_linuxloops/install_user

if [ -z "$desktop" ]; then desktop="gnome-full"; fi
case "$desktop" in
	'none')
	nixos_desktop=""
	;;
	'gnome-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.gdm.enable = true;
services.xserver.desktopManager.gnome.enable = true;
"
	;;
	'kde-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.sddm.enable = true;
services.xserver.desktopManager.plasma5.enable = true;
"
	;;
esac

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "nix-env -iA $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/installroot/tmp_linuxloops/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/installroot/tmp_linuxloops/install_custom; chmod 0755 "$linuxloopsdir"/chroot/installroot/tmp_linuxloops/install_custom; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initrd-"
initramfs_suffix=""
install_nixos_config

cleanup /installroot

chroot "$linuxloopsdir"/chroot/installroot /tmp/init

umount_chroot /installroot

umount -R "$linuxloopsdir"/chroot/installroot/mnt
umount "$linuxloopsdir"/chroot/installroot
rm -r "$linuxloopsdir"/chroot/installroot
umount "$linuxloopsdir"/chroot
}

chroot_opensuse()
{
download_lxc_image opensuse tumbleweed default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'OPENSUSEINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "opensuse-linuxloops" > /etc/hostname
mkdir -p /var/run/netconfig
echo "nameserver 8.8.8.8" > /var/run/netconfig/resolv.conf
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
zypper refresh
zypper install --no-confirm kernel-default kernel-firmware-all patterns-base-base nano ntfs-3g sudo pulseaudio alsa-utils alsa-firmware cryptsetup nano e2fsprogs ntfsprogs device-mapper cantarell-fonts dejavu-fonts acpid curl thermald bash-completion ca-certificates gpg2 polkit
systemctl enable acpid
systemctl enable thermald
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
OPENSUSEINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<OPENSUSEUSER
#!/bin/bash
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
echo "wheel:x:10:" >> /etc/group
usermod -aG wheel '$username'
echo -e "Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"\nroot ALL=(ALL) ALL\n@includedir /etc/sudoers.d" > /etc/sudoers
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
OPENSUSEUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="gnome"; fi
case "$desktop" in
	'none')
	install_desktop=""
	;;
	'budgie')
	install_desktop="
zypper install --no-confirm lightdm patterns-budgie-budgie tilix nautilus adwaita-icon-theme NetworkManager NetworkManager-applet bluez
echo -e '[LightDM]\nlogind-check-graphical=true\n\n' > /etc/lightdm/lightdm.conf
systemctl disable wicked
systemctl enable NetworkManager
"
	;;
	'cinnamon')
	install_desktop="
zypper install --no-confirm lightdm patterns-cinnamon-cinnamon gnome-terminal nemo NetworkManager NetworkManager-applet bluez
echo -e '[LightDM]\nlogind-check-graphical=true\n\n' > /etc/lightdm/lightdm.conf
systemctl disable wicked
systemctl enable NetworkManager
"
	;;
	'enlightenment')
	install_desktop="
zypper install --no-confirm lightdm patterns-enlightenment-enlightenment terminology python3-dbus-python econnman connman-nmcompat bluez
echo -e '[LightDM]\nlogind-check-graphical=true\n\n' > /etc/lightdm/lightdm.conf
systemctl disable wicked
systemctl enable connman
"
	;;
	'gnome')
	install_desktop="
zypper install --no-confirm gdm patterns-gnome-gnome gnome-terminal polkit-gnome gnome-backgrounds NetworkManager NetworkManager-applet bluez
systemctl disable wicked
systemctl enable NetworkManager
"
	;;
	'kde')
	install_desktop="
zypper install --no-confirm lightdm patterns-kde-kde konsole NetworkManager NetworkManager-applet bluez webenginepart konqueror plasma-nm5 dolphin discover discover-backend-packagekit plasma5-workspace-wallpapers
echo -e '[LightDM]\nlogind-check-graphical=true\n\n' > /etc/lightdm/lightdm.conf
systemctl disable wicked
systemctl enable NetworkManager
"
	;;
	'lxde')
	install_desktop="
zypper install --no-confirm lightdm patterns-lxde-lxde lxterminal lxde-common lxpanel pcmanfm NetworkManager bluez
echo -e '[LightDM]\nlogind-check-graphical=true\n\n' > /etc/lightdm/lightdm.conf
systemctl disable wicked
systemctl enable NetworkManager
"
	;;
	'lxqt')
	install_desktop="
zypper install --no-confirm lightdm patterns-lxqt-lxqt qterminal pcmanfm-qt NetworkManager NetworkManager-applet bluez
echo -e '[LightDM]\nlogind-check-graphical=true\n\n' > /etc/lightdm/lightdm.conf
systemctl disable wicked
systemctl enable NetworkManager
"
	;;
	'mate')
	install_desktop="
zypper install --no-confirm lightdm patterns-mate-mate mate-terminal mate-media mate-menus caja NetworkManager NetworkManager-applet bluez
echo -e '[LightDM]\nlogind-check-graphical=true\n\n' > /etc/lightdm/lightdm.conf
systemctl disable wicked
systemctl enable NetworkManager
"
	;;
	'xfce')
	install_desktop="
zypper install --no-confirm lightdm patterns-xfce-xfce xfce4-terminal thunar NetworkManager NetworkManager-applet bluez
echo -e '[LightDM]\nlogind-check-graphical=true\n\n' > /etc/lightdm/lightdm.conf
systemctl disable wicked
systemctl enable NetworkManager
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<OPENSUSEDESKTOP
#!/bin/bash
$install_desktop
OPENSUSEDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "zypper install --no-confirm $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initrd-"
initramfs_suffix=""
install_dracut

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_pop_os()
{
download_lxc_image ubuntu hirsute default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'POP_OSINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "pop_os-linuxloops" > /etc/hostname
mkdir -p /run/systemd/resolve
echo "nameserver 8.8.8.8" > /run/systemd/resolve/stub-resolv.conf
locale-gen
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
cat >/etc/apt/preferences.d/kernelstub <<'KERNELSTUB'
Package: kernelstub
Pin: release *
Pin-Priority: -1
KERNELSTUB
yes | DEBIAN_FRONTEND=noninteractive apt install software-properties-common
add-apt-repository ppa:system76/pop -y
yes | DEBIAN_FRONTEND=noninteractive apt install --reinstall apt
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
POP_OSINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<POP_OSUSER
#!/bin/bash
userdel -r -f ubuntu
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
POP_OSUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="full"; fi
case "$desktop" in
	'full')
	install_desktop=""
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<POP_OSDESKTOP
#!/bin/bash
$install_desktop
POP_OSDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "yes | apt install $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface_apt "linux-generic-* linux-headers-* linux-image-* linux-modules-*"; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initrd.img-"
initramfs_suffix=""
install_initramfstools

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_rockylinux()
{
download_lxc_image rockylinux 8 default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'ROCKYLINUXINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "rockylinux-linuxloops" > /etc/hostname
echo "nameserver 8.8.8.8" > /etc/resolv.conf
rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
yes | dnf install https://www.elrepo.org/elrepo-release-8.el8.elrepo.noarch.rpm
yes | dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY*
yes | dnf update
yes | dnf --enablerepo=elrepo-kernel install kernel-ml linux-firmware ntfs-3g sudo NetworkManager cryptsetup nano e2fsprogs ntfsprogs curl thermald bash-completion ca-certificates gpg
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
/tmp/install_initramfs
yes | dnf autoremove
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
ROCKYLINUXINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<ROCKYLINUXUSER
#!/bin/bash
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
ROCKYLINUXUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="full"; fi
case "$desktop" in
	'none')
	install_desktop=""
	;;
	'full')
	install_desktop="
yes | dnf install @\"Server with GUI\"
systemctl set-default graphical
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<ROCKYLINUXDESKTOP
#!/bin/bash
$install_desktop
ROCKYLINUXDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "yes | dnf install $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

cmdline_extra="selinux=0 $CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initramfs-"
initramfs_suffix=".img"
install_dracut

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_tails()
{
echo -n "$userpass" | cryptsetup --cipher aes-cbc-plain --key-size 256 --hash ripemd160 luksFormat "$destination_loop"p4 -
cryptsetup config "$destination_loop"p4 --label "TailsData"
echo -n "$userpass" | cryptsetup luksOpen "$destination_loop"p4 data_"$(echo $destination_loop | sed 's@/dev/@@g')" -
mkfs.ext4 -F -L "TailsData" /dev/mapper/data_"$(echo $destination_loop | sed 's@/dev/@@g')"

mount --bind "$linuxloopsdir"/chroot "$linuxloopsdir"/chroot
mount --make-rprivate "$linuxloopsdir"/chroot
mkdir -p "$linuxloopsdir"/chroot/installroot/mnt
mount --bind "$linuxloopsdir"/chroot/installroot "$linuxloopsdir"/chroot/installroot
mount --make-rprivate "$linuxloopsdir"/chroot/installroot

download_lxc_image archlinux current default /installroot

mount --rbind "$linuxloopsdir"/chroot "$linuxloopsdir"/chroot/installroot/mnt
mount --make-rprivate "$linuxloopsdir"/chroot/installroot/mnt

mount_chroot /installroot

cat >"$linuxloopsdir"/chroot/installroot/tmp/init <<'TAILSINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
mkdir -p /run/systemd/resolve
echo "nameserver 8.8.8.8" > /run/systemd/resolve/resolv.conf
sed -i 's@#en_US.UTF-8 UTF-8@en_US.UTF-8 UTF-8@g' /etc/locale.gen
locale-gen
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm cpio
mkdir -p /isomount/tmp
curl -L https://tails.darklab.sh/pub/tails/stable/tails-amd64-4.28/tails-amd64-4.28.img -o /isomount/tails.img
isomount="$(losetup --show -fP /isomount/tails.img)"
mount "$isomount"p1 /isomount/tmp
cp -r /isomount/tmp/* /mnt/
/tmp/install_boot
mkdir -p /tmp/initramfs/scripts/init-premount /tmp/initramfs/scripts/init-bottom
echo '/scripts/init-premount/linuxloops "$@"' > /tmp/initramfs/scripts/init-premount/ORDER
chmod 0755 /tmp/initramfs/scripts/init-premount/ORDER
mv /tmp/install_initramfs /tmp/initramfs/scripts/init-premount/linuxloops
chmod 0755 /tmp/initramfs/scripts/init-premount/linuxloops
echo '/scripts/init-bottom/persistencefix "$@"' > /tmp/initramfs/scripts/init-bottom/ORDER
chmod 0755 /tmp/initramfs/scripts/init-bottom/ORDER
echo "sed -i 's#loop|##g' /root/lib/live/boot/*" > /tmp/initramfs/scripts/init-bottom/persistencefix
chmod 0755 /tmp/initramfs/scripts/init-bottom/persistencefix
(cd /tmp/initramfs && find . | cpio -o -H newc | gzip > /mnt/boot/linuxloops.img)
umount /isomount/tmp
losetup -d "$isomount"
/tmp/persistence
/tmp/cleanup
exit
TAILSINIT
chmod 0755 "$linuxloopsdir"/chroot/installroot/tmp/init

cat >"$linuxloopsdir"/chroot/installroot/tmp/persistence <<TAILSPERSISTENCE
#!/bin/bash
mkdir -p /tmp/chroot
mount /mnt/live/filesystem.squashfs /tmp/chroot
mount /dev/mapper/data_"$(echo $destination_loop | sed 's@/dev/@@g')" /tmp/chroot/tmp
cat >/tmp/chroot/tmp/init <<'PERSISTENCEINIT'
#!/bin/bash
chown root:root /tmp
chmod 0775 /tmp
setfacl -m u:tails-persistence-setup:rwx /tmp
cat >/tmp/persistence.conf <<'PERSISTENCEFILE'
/home/amnesia                                        source=amnesia
/etc/NetworkManager/system-connections               source=nm-system-connections
/etc/cups                                            source=cups-configuration
/var/cache/apt/archives                              source=apt/cache
/var/lib/apt/lists                                   source=apt/lists
PERSISTENCEFILE
chown tails-persistence-setup:tails-persistence-setup /tmp/persistence.conf
chmod 0600 /tmp/persistence.conf
cp -r /etc/skel /tmp/amnesia
chown -R 1000:1000 /tmp/amnesia
PERSISTENCEINIT
chmod 0755 ./tmp/chroot/tmp/init
chroot ./tmp/chroot /tmp/init
rm -f ./tmp/chroot/tmp/init
umount /tmp/chroot/tmp
umount /tmp/chroot
TAILSPERSISTENCE
chmod 0755 "$linuxloopsdir"/chroot/installroot/tmp/persistence

cmdline_extra="boot=live config live-media=\$root_device nopersistence noprompt timezone=Etc/UTC noautologin module=Tails slab_nomerge slub_debug=FZP mce=0 vsyscall=none page_poison=1 init_on_free=1 mds=full,nosmt $CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/live/"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/live/initrd.img (\\\$disk_type,2)/linuxloops.img"
initramfs_suffix=""
install_iso_init

cleanup /installroot

chroot "$linuxloopsdir"/chroot/installroot /tmp/init

umount_chroot /installroot

umount -R "$linuxloopsdir"/chroot/installroot/mnt
umount "$linuxloopsdir"/chroot/installroot
rm -r "$linuxloopsdir"/chroot/installroot
umount "$linuxloopsdir"/chroot
cryptsetup luksClose data_"$(echo $destination_loop | sed 's@/dev/@@g')"
}

chroot_ubuntu()
{
download_lxc_image ubuntu impish default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'UBUNTUINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "ubuntu-linuxloops" > /etc/hostname
mkdir -p /run/systemd/resolve
echo "nameserver 8.8.8.8" > /run/systemd/resolve/stub-resolv.conf
locale-gen
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
cat >/etc/apt/apt.conf.d/99linuxloops <<'RECOMMENDS'
APT::Install-Recommends "0";
APT::Get::Install-Recommends "false";
RECOMMENDS
apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-generic linux-firmware initramfs-tools ntfs-3g sudo cryptsetup nano acpid curl thermald bash-completion ca-certificates gpg
yes | DEBIAN_FRONTEND=noninteractive apt purge vim
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
UBUNTUINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<UBUNTUUSER
#!/bin/bash
userdel -r -f ubuntu
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
UBUNTUUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="ubuntu"; fi
desktop_base="xserver-xorg xserver-xorg-legacy xserver-xorg-video-all mesa-vulkan-drivers alsa alsa-utils alsa-ucm-conf alsa-topology-conf pulseaudio desktop-base network-manager at-spi2-core adwaita-icon-theme-full language-selector-common udisks2 ttf-ubuntu-font-family"
case "$desktop" in
	'none')
	install_desktop=""
	;;
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter budgie-desktop ubuntu-budgie-themes pocillo-icon-theme nautilus tilix update-manager
cat >/usr/share/glib-2.0/schemas/99_budgie.gschema.override <<'DCONF'
[org.gnome.desktop.interface]
gtk-theme=\"Pocillo\"
icon-theme=\"Pocillo\"
DCONF
glib-compile-schemas /usr/share/glib-2.0/schemas/
"
	;;
	'budgie-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base ubuntu-budgie-desktop
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter cinnamon gnome-terminal nemo paper-icon-theme update-manager
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter cinnamon-desktop-environment
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter enlightenment terminology update-manager
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman bluez
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 gnome-session gnome-shell gnome-control-center gnome-terminal nautilus gnome-icon-theme dmz-cursor-theme update-manager gnome-keyring
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gnome
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter kde-plasma-desktop kwin-x11 systemsettings plasma-nm plasma-discover konsole konqueror kwalletmanager qml-module-qt-labs-platform
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base kubuntu-desktop
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter lxde-core lxterminal pcmanfm update-manager lxde-icon-theme xubuntu-icon-theme network-manager-gnome lxappearance
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lxdm lxde
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter lxqt-core qterminal pcmanfm-qt update-manager lxqt-theme-debian lxde-icon-theme xubuntu-icon-theme network-manager-gnome mutter
"
	;;
	'lxqt-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lxqt sddm
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter mate-desktop mate-session-manager marco mate-control-center mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja update-manager ayatana-indicator-application ayatana-indicator-bluetooth ayatana-indicator-datetime ayatana-indicator-power ayatana-indicator-session ayatana-indicator-sound network-manager-gnome
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base ubuntu-mate-desktop
"
	;;
	'studio-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base ubuntustudio-desktop
"
	;;
	'ubuntu')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base ubuntu-desktop-minimal gnome-terminal nautilus gnome-icon-theme dmz-cursor-theme update-manager yaru-theme-gtk yaru-theme-icon yaru-theme-sound
"
	;;
	'ubuntu-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base ubuntu-desktop
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm lightdm-gtk-greeter xfce4 xfce4-terminal thunar xfce4-notifyd network-manager-gnome greybird-gtk-theme elementary-xfce-icon-theme
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base xubuntu-desktop
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<UBUNTUDESKTOP
#!/bin/bash
$install_desktop
UBUNTUDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "yes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface_apt "linux-generic-* linux-headers-* linux-image-* linux-modules-*"; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initrd.img-"
initramfs_suffix=""
install_initramfstools

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_voidlinux()
{
download_lxc_image voidlinux current default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'VOIDLINUXINIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "voidlinux-linuxloops" > /etc/hostname
echo "nameserver 8.8.8.8" > /etc/resolv.conf
xbps-install -Su xbps
xbps-install -u
xbps-install -y void-repo-nonfree
xbps-install -y base-system ntfs-3g sudo cryptsetup nano acpid curl thermald bash-completion ca-certificates gnupg
rm -r /etc/runit/runsvdir/default/dhclient-eth0
ln -s /etc/sv/acpid /etc/runit/runsvdir/default/
ln -s /etc/sv/dbus /etc/runit/runsvdir/default/
ln -s /etc/sv/thermald /etc/runit/runsvdir/default/
xbps-remove -y base-voidstrap
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
VOIDLINUXINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<VOIDLINUXUSER
#!/bin/bash
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
VOIDLINUXUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="gnome"; fi
desktop_base="xorg NetworkManager alsa-firmware alsa-lib alsa-ucm-conf alsa-utils pulseaudio"
case "$desktop" in
	'none')
	install_desktop=""
	;;
	'gnome')
	install_desktop="
xbps-install -y $desktop_base gdm gnome-shell nautilus gnome-terminal
ln -s /etc/sv/gdm /etc/runit/runsvdir/default/
ln -s /etc/sv/NetworkManager /etc/runit/runsvdir/default/
"
	;;
	'gnome-full')
	install_desktop="
xbps-install -y $desktop_base gdm gnome
ln -s /etc/sv/gdm /etc/runit/runsvdir/default/
ln -s /etc/sv/NetworkManager /etc/runit/runsvdir/default/
"
	;;
	'kde')
	install_desktop="
xbps-install -y $desktop_base sddm kde5 dolphin konsole konqueror
ln -s /etc/sv/sddm /etc/runit/runsvdir/default/
ln -s /etc/sv/NetworkManager /etc/runit/runsvdir/default/
"
	;;
	'kde-full')
	install_desktop="
xbps-install -y $desktop_base sddm kde5 kde5-baseapps
ln -s /etc/sv/sddm /etc/runit/runsvdir/default/
ln -s /etc/sv/NetworkManager /etc/runit/runsvdir/default/
"
	;;
	'xfce')
	install_desktop="
xbps-install -y $desktop_base lightdm lightdm-gtk-greeter xfce4 nm-applet
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
ln -s /etc/sv/NetworkManager /etc/runit/runsvdir/default/
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<VOIDLINUXDESKTOP
#!/bin/bash
$install_desktop
VOIDLINUXDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "xbps-install $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initramfs-"
initramfs_suffix=".img"
install_dracut

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

chroot_zorin()
{
download_lxc_image ubuntu focal default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'ZORININIT'
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
echo "zorin-linuxloops" > /etc/hostname
mkdir -p /run/systemd/resolve
echo "nameserver 8.8.8.8" > /run/systemd/resolve/stub-resolv.conf
locale-gen
cat >/etc/locale.conf <<'LOCALE'
LANG=en_US.UTF-8
LOCALE
yes | DEBIAN_FRONTEND=noninteractive apt install software-properties-common
add-apt-repository ppa:zorinos/stable -y
add-apt-repository ppa:zorinos/patches -y
add-apt-repository ppa:zorinos/apps -y
add-apt-repository ppa:zorinos/drivers -y
yes | DEBIAN_FRONTEND=noninteractive apt install --reinstall apt
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic-hwe-20.04 linux-firmware ntfs-3g sudo network-manager cryptsetup nano acpid curl thermald bash-completion ca-certificates gpg
/tmp/install_user
/tmp/install_desktop
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom ]; then /tmp/install_custom; fi
/tmp/install_initramfs
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
echo 'LABEL=LL-BOOT /boot ext4 defaults 0 2' > /etc/fstab
exit
ZORININIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cat >"$linuxloopsdir"/chroot/tmp/install_user <<ZORINUSER
#!/bin/bash
userdel -r -f ubuntu
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
ZORINUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

if [ -z "$desktop" ]; then desktop="full"; fi
case "$desktop" in
	'full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install zorin-os-desktop
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<ZORINDESKTOP
#!/bin/bash
$install_desktop
ZORINDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "yes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" >> "$linuxloopsdir"/chroot/tmp/install_desktop
fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom; chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom; fi

if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface_apt "linux-generic-* linux-headers-* linux-image-* linux-modules-*"; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
kernel_prefix="(\\\$disk_type,$kernel_part)/vmlinuz-"
kernel_suffix=""
initramfs_prefix="(\\\$disk_type,$kernel_part)/initrd.img-"
initramfs_suffix=""
install_initramfstools

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init

umount_chroot
}

install_image()
{
umount_chroot
if mountpoint -q "$linuxloopsdir"/chroot; then umount "$linuxloopsdir"/chroot; fi
echo "Creating image file"
dd if=/dev/zero of="$fullpath" bs=1G seek=$image_size count=0 status=none
echo "Creating partition table..."
write_partition_table "$fullpath"
destination_loop=$(losetup --show -fP "$fullpath")
mkdir -p "$linuxloopsdir"/chroot
if [ "$root_device" == "/dev/mapper/root" ]; then
mkfs.fat -F 12 -n 'LL-EFI' "$destination_loop"p1
mkfs.ext4 -F -L "LL-BOOT" "$destination_loop"p2
echo -n "$userpass" | cryptsetup --cipher aes-cbc-plain --key-size 256 --hash ripemd160 luksFormat "$destination_loop"p3 -
echo -n "$userpass" | cryptsetup luksOpen "$destination_loop"p3 root_"$(echo $destination_loop | sed 's@/dev/@@g')" -
mkfs.ext4 -F -L "LL-ROOT" /dev/mapper/root_"$(echo $destination_loop | sed 's@/dev/@@g')"
if [ ! -z "$swap_size" ] && [ "$swap_size" -ne 0 ]; then
echo -n "$userpass" | cryptsetup --cipher aes-cbc-plain --key-size 256 --hash ripemd160 luksFormat "$destination_loop"p4 -
echo -n "$userpass" | cryptsetup luksOpen "$destination_loop"p4 swap_"$(echo $destination_loop | sed 's@/dev/@@g')" -
mkswap -L "LL-SWAP" /dev/mapper/swap_"$(echo $destination_loop | sed 's@/dev/@@g')"
cryptsetup luksClose swap_"$(echo $destination_loop | sed 's@/dev/@@g')"
fi
mount /dev/mapper/root_"$(echo $destination_loop | sed 's@/dev/@@g')" "$linuxloopsdir"/chroot
else
mkfs.fat -F 12 -n 'LL-EFI' "$destination_loop"p1
mkfs.ext4 -F -L "LL-BOOT" "$destination_loop"p2
mkfs.ext4 -F -L "LL-ROOT" "$destination_loop"p3
if [ ! -z "$swap_size" ] && [ "$swap_size" -ne 0 ]; then
mkswap -L "LL-SWAP" "$destination_loop"p4
fi
mount "$destination_loop"p3 "$linuxloopsdir"/chroot
fi
chroot_"$distro"
if mountpoint -q "$linuxloopsdir"/chroot; then umount "$linuxloopsdir"/chroot; fi
if [ "$root_device" == "/dev/mapper/root" ]; then
cryptsetup luksClose root_"$(echo $destination_loop | sed 's@/dev/@@g')"
fi
losetup -d $destination_loop
}

grub_config()
{
if [ ! -z "$wsl" ]; then
	img_uuid=$(su $(getent passwd $SUDO_UID | cut -d: -f1) -c "PATH=$PATH:/mnt/c/Windows/System32 mountvol.exe $(echo ${fullpath:5:1} | tr a-z A-Z): /L | cut -d'{' -f2 | cut -d'}' -f1")
else
	img_uuid=$(blkid -s PARTUUID -o value "$(df "$fullpath" --output=source | sed 1d)")
fi
img_path=$(if [ $(findmnt -n -o TARGET -T "$fullpath") == "/" ]; then echo $(realpath "$fullpath"); else echo $(realpath "$fullpath") | sed "s#$(findmnt -n -o TARGET -T "$fullpath")##g"; fi)
if [ -z "$wsl" ] && ([ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "ubuntu" ] || [ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "linuxmint" ] || [ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "zorin" ]); then remove_tpm="\n	rmmod tpm"; fi
config="menuentry \"$distro\" --class \"$distro\" {$remove_tpm
	img_path="$img_path"
	img_uuid="$img_uuid"
	search --no-floppy --set=root --file "\$img_path"
	loopback loop "\$img_path"
	disk_type=loop
	root_device=$root_device
	source (\$disk_type,2)/linuxloops/config
	kernel=\$default_kernel
	linux \$kernel_prefix\$kernel\$kernel_suffix img_uuid="\$img_uuid" img_path="\$img_path" root="\$root_device" "$cmdline_extra" rw quiet
	initrd $initramfs_format
}

submenu \"Advanced options for $distro\" --class \"$distro\" {$remove_tpm
	img_path="$img_path"
	img_uuid="$img_uuid"
	search --no-floppy --set=root --file "\$img_path"
	loopback loop "\$img_path"
	disk_type=loop
	root_device=$root_device
	source (\$disk_type,2)/linuxloops/config
	for kernel in \$kernels; do
	menuentry \"Boot with kernel \$kernel\" \$kernel {
		linux \$kernel_prefix\$2\$kernel_suffix img_uuid="\$img_uuid" img_path="\$img_path" root="\$root_device" "$cmdline_extra" rw quiet
		initrd $initramfs_subsection_format
	}
	menuentry \"Boot with kernel \$kernel in recovery mode\" \$kernel {
		linux \$kernel_prefix\$2\$kernel_suffix img_uuid="\$img_uuid" img_path="\$img_path" root="\$root_device" "$cmdline_extra" rw systemd.unit=multi-user.target
		initrd $initramfs_subsection_format
	}
	menuentry \"Boot with kernel \$kernel in linuxloops debug mode\" \$kernel {
		linux \$kernel_prefix\$2\$kernel_suffix img_uuid="\$img_uuid" img_path="\$img_path" root="\$root_device" "$cmdline_extra" rw linuxloops_debug=1
		initrd $initramfs_subsection_format
	}
	done
}"
echo -e "$config" > "$fullpath".grub.txt
if [ -f ./usb_bootloader.img ]; then
	usbboot_loop=$(losetup --show -fP ./usb_bootloader.img)
	mount "$usbboot_loop"p1 "$linuxloopsdir"/chroot
	echo -e "set timeout=2\n"> "$linuxloopsdir"/chroot/efi/boot/grub.cfg
	echo -e "$config" >> "$linuxloopsdir"/chroot/efi/boot/grub.cfg
	umount "$linuxloopsdir"/chroot
	losetup -d $usbboot_loop
	finalise="The grub config to boot $distro has been installed in the usb_bootloader.img file. Write this file to a usb flashdrive with Rufus, dd or any other image writing tool and boot from it."
	if [ ! -z "$zenity" ]; then
		zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="$finalise" --ok-label="Exit"
	else
		echo -e "$finalise"
	fi
elif [ ! -z "$wsl" ]; then
	grubinstall="The $distro dual boot disk image has been created and the config needed to boot $distro from Grub2Win has been generated in the file:\n$(echo ${fullpath:5:1} | tr a-z A-Z):\\\\$(echo ${fullpath:7} | sed 's@\/@\\\\@g').grub.txt\n\nNow, install Grub2Win and launch it, click on \"Manage Boot Menu\" -> \"Add a new entry\" -> set \"Type\" as \"Create user section\", open the file $(echo ${fullpath:5:1} | tr a-z A-Z):\\\\$(echo ${fullpath:7} | sed 's@\/@\\\\@g').grub.txt and copy its content in the Grub2Win notepad window, save and close the Grub2Win notepad window then click \"Apply\" and \"OK\"."
	finalise="Please note that $distro will not be bootable and / or stable if you do not perform the below actions (Refer to Windows online resources if needed):\n- Ensure that bitlocker is disabled on the drive which contains the $distro image or disable it.\n- Disable fast startup.\n- Disable hibernation.\n\nOnce done, reboot your computer and select $distro from the Grub2Win menu."
	if [ ! -z "$zenity" ]; then
		zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="$grubinstall" --ok-label="Next"
		zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="$finalise" --ok-label="Exit"
	else
		echo -e "$grubinstall"
		echo -e ""
		echo -e "$finalise"
	fi
elif [ ! -z "$brunch" ]; then
	grubinstall="The grub config needed to boot $distro has been generated in the file \"$fullpath.grub.txt\".\n\n ****************************************************************************************** \n$config\n ****************************************************************************************** \n\nNow copy the above grub config, run \"sudo edit-brunch-config -g\" and paste it (lines between stars) at the end of the file.\n\nOnce done, press CTRL+X and then ENTER to save, reboot your computer and start $distro"
	if [ ! -z "$zenity" ]; then
		zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="$grubinstall" --ok-label="Exit"
	else
		echo -e "$grubinstall"
	fi
elif [ ! -z "$chromeos" ]; then
	source=$(blkid --match-token LABEL=EFI-SYSTEM | head -1 | cut -d':' -f1)
	mkdir -p /mnt/stateful_partition/unencrypted/linuxloops_config/tmp
	mount "$source" /mnt/stateful_partition/unencrypted/linuxloops_config/tmp
	rm -r /mnt/stateful_partition/unencrypted/linuxloops_config/tmp/*
	curl -L https://github.com/sebanc/linuxloops/raw/main/chromebook_boot.tar.gz -o /home/chronos/user/Downloads/chromebook_boot.tar.gz
	tar zxf /home/chronos/user/Downloads/chromebook_boot.tar.gz -C /mnt/stateful_partition/unencrypted/linuxloops_config/tmp
	rm -f /home/chronos/user/Downloads/chromebook_boot.tar.gz
	echo -e "set timeout=2\n"> /mnt/stateful_partition/unencrypted/linuxloops_config/tmp/efi/boot/grub.cfg
	echo -e "$config" >> /mnt/stateful_partition/unencrypted/linuxloops_config/tmp/efi/boot/grub.cfg
	umount /mnt/stateful_partition/unencrypted/linuxloops_config/tmp
	grubinstall="The grub config needed to boot $distro has been added to your boot partition 12, if not already done, refer to MrChromebox instructions to allow booting from legacy hdd boot (through RW_LEGACY firmware or ALT firmware), then reboot your computer and press CTRL+L to start $distro."
	if [ ! -z "$zenity" ]; then
		zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="$grubinstall" --ok-label="Exit"
	else
		echo -e "$grubinstall"
	fi
else
	grubinstall="The grub config needed to boot $distro has been generated in the file \"$fullpath.grub.txt\".\n\nIf you have a linux distro installed which uses grub as bootloader, open another terminal and run the below command to generate the grub config automatically:\nsudo cat /etc/grub.d/40_custom $fullpath.grub.txt | sudo tee /etc/grub.d/99_linuxloops; sudo chmod 0755 /etc/grub.d/99_linuxloops; sudo grub-mkconfig -o /boot/grub/grub.cfg\n\nOtherwise, add this grub config (lines between stars) manually to another grub bootloader:\n\n ****************************************************************************************** \n$config\n ****************************************************************************************** \n\nOnce the above actions are completed, you can reboot your computer and start $distro".
	if [ ! -z "$zenity" ]; then
		zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="$grubinstall" --ok-label="Exit"
	else
		echo -e "$grubinstall"
	fi
fi
}

set_credentials()
{
if [ "$distro" == "tails" ]; then
	if [ ! -z "$zenity" ]; then
	until false; do
		form=$(zenity --forms --title="Persistent storage" --text="Please define your persistent storage encryption password." --add-password="Input your persistent storage encryption password" --add-password="Confirm your persistent storage encryption password")
		userpass="$(echo $form | cut -d'|' -f1)"
		verifuserpass="$(echo $form | cut -d'|' -f2)"
		if [ -z "$form" ]; then exit 0; fi
		if [ -z "$userpass" ]; then zenity --height=480 --width=640 --error --text="Please define a password.\n"; continue; fi
		if echo "$userpass" | grep -q '[^a-zA-Z0-9!@#&$£%µ^+-\*/=~¨]'; then zenity --height=480 --width=640 --error --text="Password contains unsupported characters.\n"; continue; fi
		if [ "$userpass" != "$verifuserpass" ]; then zenity --height=480 --width=640 --error --text="Passwords do not match, try again.\n"; continue; fi
		break
	done
	else
	until false; do
		read -s -p "Input your persistent storage encryption password: " userpass
		echo ""
		read -s -p "Verify your persistent storage encryption password " verifuserpass
		echo ""
		if [ -z "$userpass" ]; then echo -e "Please define a password.\n\n"; continue; fi
		if echo "$userpass" | grep -q '[^a-zA-Z0-9!@#&$£%µ^+-\*/=~¨]'; then echo -e "Password contains unsupported characters.\n\n"; continue; fi
		if [ "$userpass" != "$verifuserpass" ]; then echo -e "Passwords do not match, try again.\n\n"; continue; fi
		break
	done
	fi
else
	if [ "$root_device" == "/dev/mapper/root" ]; then
		encrypted_text="You have requested encryption, please input your username and the encryption password.\nYour user account password will be set as the encryption password but you can change it later."
		password_text="encrypted partitions password"
	else
		encrypted_text="Please input your username and user account password."
		password_text="user account password"
	fi
	if [ ! -z "$zenity" ]; then
	until false; do
		form=$(zenity --forms --title="Create user" --text="$encrypted_text" --add-entry="Input your username" --add-password="Input your $password_text" --add-password="Confirm your $password_text")
		username="$(echo $form | cut -d'|' -f1)"
		userpass="$(echo $form | cut -d'|' -f2)"
		verifuserpass="$(echo $form | cut -d'|' -f3)"
		if [ -z "$form" ]; then exit 0; fi
		if [ -z "$username" ]; then zenity --height=480 --width=640 --error --text="Please define your username.\n"; continue; fi
		if [ -z "$userpass" ]; then zenity --height=480 --width=640 --error --text="Please define a password.\n"; continue; fi
		if echo "$username" | grep -q '^[a-z][-a-z0-9]*\$'; then zenity --height=480 --width=640 --error --text="Username contains unsupported characters.\n"; continue; fi
		if echo "$userpass" | grep -q '[^a-zA-Z0-9!@#&$£%µ^+-\*/=~¨]'; then zenity --height=480 --width=640 --error --text="Password contains unsupported characters.\n"; continue; fi
		if [ "$userpass" != "$verifuserpass" ]; then zenity --height=480 --width=640 --error --text="Passwords do not match, try again.\n"; continue; fi
		break
	done
	else
	echo -e "$encrypted_text"
	until false; do
		read -p "Please enter your username: " username
		if [ -z "$username" ]; then echo -e "Please define your username.\n\n"; continue; fi
		if echo "$username" | grep -q '^[a-z][-a-z0-9]*\$'; then echo -e "Username contains unsupported characters.\n\n"; continue; fi
		break
	done
	until false; do
		read -s -p "Input your $password_text password: " userpass
		echo ""
		read -s -p "Verify your $password_text password: " verifuserpass
		echo ""
		if [ -z "$userpass" ]; then echo -e "Please define a password.\n\n"; continue; fi
		if echo "$userpass" | grep -q '[^a-zA-Z0-9!@#&$£%µ^+-\*/=~¨]'; then echo -e "Password contains unsupported characters.\n\n"; continue; fi
		if [ "$userpass" != "$verifuserpass" ]; then echo -e "Passwords do not match, try again.\n\n"; continue; fi
		break
	done
	fi
fi
}

create_image()
{
if grep -qi 'Microsoft' /proc/version; then wsl=1; fi
if [ "$(grep -o 'NAME=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "Chrome OS" ]; then if [ -f /etc/brunch_version ]; then brunch=1; else chromeos=1; fi; fi
linuxloopsdir="$(eval echo ~$SUDO_USER)"/linuxloops
dist_params "$distro"
mkdir -p "$linuxloopsdir"
if [ ! -z "$zenity" ]; then
	local path
	if  [ ! -z "$wsl" ]; then
		path=$(su "$SUDO_USER" -c "zenity --height=480 --width=640 --file-selection --save --title=\"Select the path to store the $distro disk image\" --file-filter=*.img --filename=\"/mnt/c/Users/$(echo $(/mnt/c/Windows/System32/cmd.exe /c echo %username% 2> /dev/null) | sed 's/[^a-zA-Z0-9]//g')/$distro.img\"")
	elif [ ! -z "$chromeos" ] || [ ! -z "$brunch" ]; then
		path=$(su "$SUDO_USER" -c "zenity --height=480 --width=640 --file-selection --save --title=\"Select the path to store the $distro disk image\" --file-filter=*.img --filename=\"/mnt/stateful_partition/unencrypted/$distro.img\"")
	else
		path=$(su "$SUDO_USER" -c "zenity --height=480 --width=640 --file-selection --save --title=\"Select the path to store the $distro disk image\" --file-filter=*.img --filename=\"$linuxloopsdir/$distro.img\"")
	fi
	if [ -z "$path" ]; then exit 1; else destination="$path"; fi
	if [[ "$destination" == *"/"* ]] && ([ -z "$(realpath $destination 2> /dev/null)" ] || [ ! -d "$(echo $(realpath $destination) | sed 's@[^/]*$@@')" ]); then zenity --height=480 --width=640 --error --text="Desination path does not exist, please provide an existing path."; create_image; return; fi
	rm -f "$destination"
	if [[ ! $destination == *"/"* ]]; then path="$PWD"; else path="$(realpath "$destination")"; path="$(echo ${path} | sed 's@[^/]*$@@')"; fi
	fullpath="$path/$(basename $destination)"
	if [ ! -z "$wsl" ] && [ ! -z "${path##/mnt/*/*}" ]; then zenity --height=480 --width=640 --error --text="The $distro disk image has to be installed outside of the WSL VM, please specify a path such as /mnt/\&lt;drive letter\&gt;/..."; create_image; return; fi
	if ([ ! -z "$chromeos" ] || [ ! -z "$brunch" ]) && [ ! -z "${path##/mnt/stateful_partition/unencrypted/*}" ]; then zenity --height=480 --width=640 --error --text="The $distro disk image has to be installed in the unencrypted data partition, please specify a path such as /mnt/stateful_partition/unencrypted/..."; create_image; return; fi
	if [ $(( ($(df -k --output=avail "$path" | sed 1d) / 1024 / 1024) - 14 )) -lt 0 ]; then  zenity --height=480 --width=640 --error --text="Not enough space to create image file, the minimum size is 10 GB. Verify that the path you have selected points to a partition with more than 10GB available."; create_image; fi
	image_size=$(zenity --height=480 --width=640 --title="LinuxLoops" --scale --text "This partition has $(( ($(df -k --output=avail $path | sed 1d) / 1024 / 1024) )) GB available.\n how much would you like to allocate for $distro ?\n (Around 10GB will be occupied by system files, the remaining space will be available).\n" --min-value=10 --max-value=$(( ($(df -k --output=avail $path | sed 1d) / 1024 / 1024) )) --value=10 --step 1)
	if [ -z "$image_size" ]; then exit 1; fi
	if [ -z "$swap_size" ]; then swap_size=$(zenity --height=480 --width=640 --title="LinuxLoops" --scale --text "Please select here the swap partition size (swap is not mandatory, if you do not know what swap is you can select 0).\n" --min-value=0 --max-value=$(( $image_size - 8 )) --value=0 --step 1); fi
	if [ -z "$swap_size" ]; then exit 1; fi
	if [ ! -z "$(echo $surface_supported | grep -w $distro)" ]; then surface=$(zenity --height=480 --width=640 --title "LinuxLoops" --list --text "Do you want to automatically install the surface device patches from https://github.com/linux-surface ? (enable this only if you have a Microsoft Surface device)" --column "Apply Surface patches" "No" "Yes" --ok-label="Next"); else surface="No"; fi
	if [ -z "$surface" ]; then exit 1; fi
	if [ -z "$encryption" ] && [ ! -z $(which cryptsetup) ]; then encryption=$(zenity --height=480 --width=640 --title "LinuxLoops" --list --text "Do you want the image to be encrypted ? This is highly recommended if you intend to keep sensitive data in it, however it will slightly impacts performance." --column "Encryption" "Yes" "No" --ok-label="Next"); else encryption="No"; fi
	if [ -z "$encryption" ]; then exit 1; fi
else
	if [ -z "$destination" ]; then echo "The -img argument has not been specified."; fi
	if [ ! -z "$swap_size" ] && [ $(( $image_size - $swap_size )) -lt 8 ]; then echo "At least 8 GB should be available for the main partition, please increase the image size or reduce the swap size."; exit 1; fi
	if [[ "$destination" == *"/"* ]] && ([ -z "$(realpath $destination 2> /dev/null)" ] || [ ! -d "$(echo $(realpath $destination) | sed 's![^/]*$!!')" ]); then echo "Desination path does not exist, please provide an existing path."; exit 1; fi
	rm -rf "$destination"
	if [[ ! "$destination" == *"/"* ]]; then path="$PWD"; else path="$(echo $(realpath $destination) | sed 's![^/]*$!!')"; fi
	fullpath="$path/$(basename $destination)"
	if [ ! -z "$wsl" ] && [ ! -z "${path##/mnt/*}" ]; then echo "The $distro disk image has to be installed outside of the WSL VM, please specify a path such as /mnt/<drive letter>/..."; exit 1; fi
	if [ ! -z "$chromeos" ] || [ ! -z "$brunch" ] && [ ! -z "${path##/mnt/stateful_partition/unencrypted/*}" ]; then echo "The $distro disk image has to be installed in the unencrypted data partition, please specify a path such as /mnt/stateful_partition/unencrypted/..."; exit 1; fi
	if [ $(( ($(df -k --output=avail "$path" | sed 1d) / 1024 / 1024) - $image_size )) -lt 0 ]; then echo "Not enough space to create image file, available space is $(( ($(df -k --output=avail $path | sed 1d) / 1024 / 1024) )) GB. If you think that this is incorrect, verify that you have correctly mounted the destination partition or if the partition is in ext4 format that there is no reserved space (cf. https://odzangba.wordpress.com/2010/02/20/how-to-free-reserved-space-on-ext4-partitions)"; exit 1; fi
	if [ "$surface" == "Yes" ] && [ -z "$(echo $surface_supported | grep -w $distro)" ]; then echo "Surface patches are not available for this distro, supported distros are: $surface_supported."; exit 1; fi
fi
if [ "$encryption" == "Yes" ]; then root_device="/dev/mapper/root"; vm_root_device="$root_device"; else root_device="/dev/loop0p3"; vm_root_device="/dev/sda3"; fi
set_credentials
if [ ! -z "$zenity" ]; then
	install_image >(zenity --height=480 --width=640 --title="LinuxLoops installer" --progress --auto-close --pulsate --text="Installing $distro with $desktop desktop.\nYou can follow the install process in the terminal window." --percentage=100)
else
	install_image
fi
grub_config
}

if [ $# -eq 0 ]; then
	if ! which zenity > /dev/null 2>&1 ; then echo "To use the GUI installer you need a Linux environment with GUI apps support (actual Linux distro or Windows 11 WSL) and to install the \"zenity\" package."; usage; exit 1; fi
	zenity=1
	if ! zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="Welcome to the LinuxLoops installer." --ok-label="Next"; then exit 0; fi
	distro=$(zenity --height=480 --width=640 --list --text "Which Linux distribution do you want to install ?" --column "Distribution" $available_distros)
	if [ -z "$distro" ]; then exit 0; fi
	list_desktops $distro
	desktop=$(zenity --height=480 --width=640 --list --text "Which desktop environment do you want to install ?"  --column "Desktop environment" $available_desktops)
	if [ -z "$desktop" ]; then exit 0; fi
else
	while [ $# -gt 0 ]; do
		case "$1" in
			-dist | --distribution)
			shift
			distro="$1"
			;;
			-env | --environment)
			shift
			desktop="$1"
			;;
			-img | --imagepath)
			shift
			if [ -z "${1##/dev/*}" ]; then echo "linuxloops images can only be installed on mounted filesystems."; exit 1; fi
			destination="$1"
			;;
			-s | --size)
			shift
			if [ -z "${1##*[!0-9]*}" ] ; then
				echo "Provided disk image size is not numeric: $1"
				exit 1
			else
				if [ $1 -lt 10 ] ; then
					echo "Disk image size cannot be lower than 10 GB"
					exit 1
				fi
			fi
			image_size=$1
			;;
			-z | --swapsize)
			shift
			if [ -z "${1##*[!0-9]*}" ] ; then
				echo "Provided swap size is not numeric: $1"
				exit 1
			fi
			swap_size=$1
			;;
			-e | --encrypt)
			if [ -z $(which cryptsetup) ]; then echo "\"cryptsetup\" program needs to be installed for encryption support."; exit 1; fi
			encryption="Yes"
			;;
			-S | --surface)
			surface="Yes"
			;;
			-l | --list)
			list_all
			exit 0
			;;
			-h | --help)
			usage
			exit 0
			;;
			*)
			echo "$1 argument is not valid"
			usage
			exit 1
		esac
		shift
	done
	check_parameters
	
	if [ -z "$image_size" ]; then image_size=10; fi
fi
create_image
